
bcare001_lab2_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000180  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ed  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000161  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000104  00000000  00000000  000006e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
}

int main(void)
{
	//Assign and initialize Ports
	DDRA = 0x00; //Configure port A as inputs
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00;
  6e:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF; //Configure port C as output
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00; //Initialize inputs to 0
  74:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0x00; //Initialize inputs to 0
  76:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00; //Initialize outputs to 0
  78:	15 ba       	out	0x15, r1	; 21
	//Define Variables
	unsigned char count = 0x00;
	
    while (1){
		count = 0x00;
		for (unsigned int i=0; i<8; i++){
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	e0 e0       	ldi	r30, 0x00	; 0
	
	//Define Variables
	unsigned char count = 0x00;
	
    while (1){
		count = 0x00;
  7e:	70 e0       	ldi	r23, 0x00	; 0
		for (unsigned int i=0; i<8; i++){
  80:	2f 2f       	mov	r18, r31
  82:	3e 2f       	mov	r19, r30
	
	//Define Variables
	unsigned char count = 0x00;
	
    while (1){
		count = 0x00;
  84:	67 2f       	mov	r22, r23
		for (unsigned int i=0; i<8; i++){
			if(getBit(PINA,i)){
  86:	89 b3       	in	r24, 0x19	; 25
  88:	a9 01       	movw	r20, r18
  8a:	55 27       	eor	r21, r21
//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k){
	return ((x & (0x01 << k)) != 0);
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	04 2e       	mov	r0, r20
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
  92:	95 95       	asr	r25
  94:	87 95       	ror	r24
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <main+0x26>
	unsigned char count = 0x00;
	
    while (1){
		count = 0x00;
		for (unsigned int i=0; i<8; i++){
			if(getBit(PINA,i)){
  9a:	80 fd       	sbrc	r24, 0
				count++;
  9c:	6f 5f       	subi	r22, 0xFF	; 255
			}
			if(getBit(PINB,i)){
  9e:	86 b3       	in	r24, 0x16	; 22
//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k){
	return ((x & (0x01 << k)) != 0);
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x3c>
  a4:	95 95       	asr	r25
  a6:	87 95       	ror	r24
  a8:	4a 95       	dec	r20
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <main+0x38>
		count = 0x00;
		for (unsigned int i=0; i<8; i++){
			if(getBit(PINA,i)){
				count++;
			}
			if(getBit(PINB,i)){
  ac:	80 fd       	sbrc	r24, 0
				count++;
  ae:	6f 5f       	subi	r22, 0xFF	; 255
	//Define Variables
	unsigned char count = 0x00;
	
    while (1){
		count = 0x00;
		for (unsigned int i=0; i<8; i++){
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 30       	cpi	r18, 0x08	; 8
  b6:	31 05       	cpc	r19, r1
  b8:	31 f7       	brne	.-52     	; 0x86 <main+0x1a>
			}
			if(getBit(PINB,i)){
				count++;
			}
		}
		PORTC = count;
  ba:	65 bb       	out	0x15, r22	; 21
    }
  bc:	e1 cf       	rjmp	.-62     	; 0x80 <main+0x14>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
