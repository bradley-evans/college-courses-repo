
bcare001_lab2_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001c3  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  000003bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ee  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000109  00000000  00000000  00000783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setBit>:
 */ 
 
 #include <avr/io.h>
// Bit-access function
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  6c:	44 23       	and	r20, r20
  6e:	49 f0       	breq	.+18     	; 0x82 <setBit+0x16>
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <setBit+0xe>
  76:	22 0f       	add	r18, r18
  78:	33 1f       	adc	r19, r19
  7a:	6a 95       	dec	r22
  7c:	e2 f7       	brpl	.-8      	; 0x76 <setBit+0xa>
  7e:	82 2b       	or	r24, r18
  80:	08 95       	ret
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <setBit+0x20>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <setBit+0x1c>
  90:	20 95       	com	r18
  92:	82 23       	and	r24, r18
}
  94:	08 95       	ret

00000096 <main>:
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
}
int main(void) {
	//Assign and initialize Ports
	DDRA = 0x00; 
  96:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF; 
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  9c:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00; //Initialize inputs to 0
  9e:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00; //Initialize outputs to 0
  a0:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00; //Initialize outputs to 0
  a2:	15 ba       	out	0x15, r1	; 21
	
    while(1) {
		tempC = 0x00;
		tempB = 0x00;
		
        for(unsigned int i = 0; i<8; i++){
  a4:	d1 2c       	mov	r13, r1
  a6:	e1 2c       	mov	r14, r1
	unsigned char tempC = 0x00;
	unsigned char tempB = 0x00;
	
    while(1) {
		tempC = 0x00;
		tempB = 0x00;
  a8:	f1 2c       	mov	r15, r1
		
        for(unsigned int i = 0; i<8; i++){
  aa:	cd 2d       	mov	r28, r13
  ac:	de 2d       	mov	r29, r14
	unsigned char tempC = 0x00;
	unsigned char tempB = 0x00;
	
    while(1) {
		tempC = 0x00;
		tempB = 0x00;
  ae:	0f 2d       	mov	r16, r15
	PORTC = 0x00; //Initialize outputs to 0
	unsigned char tempC = 0x00;
	unsigned char tempB = 0x00;
	
    while(1) {
		tempC = 0x00;
  b0:	1f 2d       	mov	r17, r15
		tempB = 0x00;
		
        for(unsigned int i = 0; i<8; i++){
			if(i < 4){
  b2:	c4 30       	cpi	r28, 0x04	; 4
  b4:	d1 05       	cpc	r29, r1
  b6:	80 f4       	brcc	.+32     	; 0xd8 <main+0x42>
				tempC = setBit(tempC,i+4,getBit(PINA,i));
  b8:	49 b3       	in	r20, 0x19	; 25
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}

unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	0c 2e       	mov	r0, r28
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x2e>
  c0:	55 95       	asr	r21
  c2:	47 95       	ror	r20
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <main+0x2a>
  c8:	41 70       	andi	r20, 0x01	; 1
		tempC = 0x00;
		tempB = 0x00;
		
        for(unsigned int i = 0; i<8; i++){
			if(i < 4){
				tempC = setBit(tempC,i+4,getBit(PINA,i));
  ca:	6c 2f       	mov	r22, r28
  cc:	6c 5f       	subi	r22, 0xFC	; 252
  ce:	81 2f       	mov	r24, r17
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <setBit>
  d4:	18 2f       	mov	r17, r24
  d6:	0f c0       	rjmp	.+30     	; 0xf6 <main+0x60>
			}else{
				tempB = setBit(tempB,i-4,getBit(PINA,i));
  d8:	49 b3       	in	r20, 0x19	; 25
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}

unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	0c 2e       	mov	r0, r28
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x4e>
  e0:	55 95       	asr	r21
  e2:	47 95       	ror	r20
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x4a>
  e8:	41 70       	andi	r20, 0x01	; 1
		
        for(unsigned int i = 0; i<8; i++){
			if(i < 4){
				tempC = setBit(tempC,i+4,getBit(PINA,i));
			}else{
				tempB = setBit(tempB,i-4,getBit(PINA,i));
  ea:	6c 2f       	mov	r22, r28
  ec:	64 50       	subi	r22, 0x04	; 4
  ee:	80 2f       	mov	r24, r16
  f0:	0e 94 36 00 	call	0x6c	; 0x6c <setBit>
  f4:	08 2f       	mov	r16, r24
	
    while(1) {
		tempC = 0x00;
		tempB = 0x00;
		
        for(unsigned int i = 0; i<8; i++){
  f6:	21 96       	adiw	r28, 0x01	; 1
  f8:	c8 30       	cpi	r28, 0x08	; 8
  fa:	d1 05       	cpc	r29, r1
  fc:	d1 f6       	brne	.-76     	; 0xb2 <main+0x1c>
				tempC = setBit(tempC,i+4,getBit(PINA,i));
			}else{
				tempB = setBit(tempB,i-4,getBit(PINA,i));
			}
		}
		PORTB = tempB;
  fe:	08 bb       	out	0x18, r16	; 24
		PORTC = tempC;
 100:	15 bb       	out	0x15, r17	; 21
	}
 102:	d3 cf       	rjmp	.-90     	; 0xaa <main+0x14>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
