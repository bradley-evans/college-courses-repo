
bcare001_lab2_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000178  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000cf  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000e8  00000000  00000000  000003ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000173  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
    return ((x & (0x01 << k)) != 0);
}

int main(void) {
	//Assign and initialize Ports
	DDRB = 0xFE; //Output, PB1 Input
  6c:	8e ef       	ldi	r24, 0xFE	; 254
  6e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; //Inputs
  70:	11 ba       	out	0x11, r1	; 17
	PORTB = 0x01; //Initialize inputs to 0
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	88 bb       	out	0x18, r24	; 24
	PORTD = 0x00; //Initialize outputs to 0
  76:	12 ba       	out	0x12, r1	; 18
		airbag = 0;
		total_weight = (PIND * 2) + getBit(PINB,0);
		//If weight is greater than 70, enable airbag/disable led
		if(total_weight>=70){
			airbag = setBit(airbag,1,1);
			airbag = setBit(airbag,2,0);
  78:	62 e0       	ldi	r22, 0x02	; 2
		//If weight is between 5 and 70 disable airbag/enable led
		}else if(total_weight>5){
			airbag = setBit(airbag,1,0);	
			airbag = setBit(airbag,2,1);
  7a:	e4 e0       	ldi	r30, 0x04	; 4
		}else{
			airbag = setBit(airbag,1,0);
			airbag = setBit(airbag,2,0);
  7c:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char airbag;
	unsigned int total_weight;
	unsigned char temp;
	
    while(1) {
		temp = 0x01 & PINB;
  7e:	86 b3       	in	r24, 0x16	; 22
  80:	28 2f       	mov	r18, r24
  82:	21 70       	andi	r18, 0x01	; 1
		airbag = 0;
		total_weight = (PIND * 2) + getBit(PINB,0);
  84:	80 b3       	in	r24, 0x10	; 16
  86:	36 b3       	in	r19, 0x16	; 22
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
// Bit-access functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
  8e:	43 2f       	mov	r20, r19
  90:	41 70       	andi	r20, 0x01	; 1
  92:	50 e0       	ldi	r21, 0x00	; 0
	unsigned char temp;
	
    while(1) {
		temp = 0x01 & PINB;
		airbag = 0;
		total_weight = (PIND * 2) + getBit(PINB,0);
  94:	84 0f       	add	r24, r20
  96:	95 1f       	adc	r25, r21
		//If weight is greater than 70, enable airbag/disable led
		if(total_weight>=70){
  98:	86 34       	cpi	r24, 0x46	; 70
  9a:	91 05       	cpc	r25, r1
  9c:	20 f4       	brcc	.+8      	; 0xa6 <main+0x3a>
			airbag = setBit(airbag,1,1);
			airbag = setBit(airbag,2,0);
		//If weight is between 5 and 70 disable airbag/enable led
		}else if(total_weight>5){
  9e:	06 97       	sbiw	r24, 0x06	; 6
  a0:	20 f4       	brcc	.+8      	; 0xaa <main+0x3e>
			airbag = setBit(airbag,1,0);	
			airbag = setBit(airbag,2,1);
		}else{
			airbag = setBit(airbag,1,0);
			airbag = setBit(airbag,2,0);
  a2:	87 2f       	mov	r24, r23
  a4:	03 c0       	rjmp	.+6      	; 0xac <main+0x40>
		airbag = 0;
		total_weight = (PIND * 2) + getBit(PINB,0);
		//If weight is greater than 70, enable airbag/disable led
		if(total_weight>=70){
			airbag = setBit(airbag,1,1);
			airbag = setBit(airbag,2,0);
  a6:	86 2f       	mov	r24, r22
  a8:	01 c0       	rjmp	.+2      	; 0xac <main+0x40>
		//If weight is between 5 and 70 disable airbag/enable led
		}else if(total_weight>5){
			airbag = setBit(airbag,1,0);	
			airbag = setBit(airbag,2,1);
  aa:	8e 2f       	mov	r24, r30
		}else{
			airbag = setBit(airbag,1,0);
			airbag = setBit(airbag,2,0);
		}
		PORTB = airbag | temp;
  ac:	82 2b       	or	r24, r18
  ae:	88 bb       	out	0x18, r24	; 24
	}
  b0:	e6 cf       	rjmp	.-52     	; 0x7e <main+0x12>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
