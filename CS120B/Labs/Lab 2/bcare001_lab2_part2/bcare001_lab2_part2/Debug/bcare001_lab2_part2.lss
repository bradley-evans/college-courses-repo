
bcare001_lab2_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003b8  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000102  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015f  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000169  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d9  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	33 c0       	rjmp	.+102    	; 0x102 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
}

int main(void)
{
	//Assign and initialize Ports
	DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
	unsigned char tempC = 0x00;
  a8:	80 e0       	ldi	r24, 0x00	; 0
	
    while (1){
		//Set PC6 - Low Fuel LED
		if(PINA<=4){
  aa:	90 b1       	in	r25, 0x00	; 0
  ac:	95 30       	cpi	r25, 0x05	; 5
  ae:	10 f4       	brcc	.+4      	; 0xb4 <main+0x16>

#include <avr/io.h>

//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x18>
  b4:	8f 7b       	andi	r24, 0xBF	; 191
			tempC=setBit(tempC,6,1);
		}else{
			tempC=setBit(tempC,6,0);
		}
		//Set PC5
		if(PINA>=1){
  b6:	90 b1       	in	r25, 0x00	; 0
  b8:	99 23       	and	r25, r25
  ba:	11 f0       	breq	.+4      	; 0xc0 <main+0x22>

#include <avr/io.h>

//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x24>
  c0:	8f 7d       	andi	r24, 0xDF	; 223
			tempC=setBit(tempC,5,1);
		}else{
			tempC=setBit(tempC,5,0);
		}
		//Set PC4
		if(PINA>=3){
  c2:	90 b1       	in	r25, 0x00	; 0
  c4:	93 30       	cpi	r25, 0x03	; 3
  c6:	10 f0       	brcs	.+4      	; 0xcc <main+0x2e>

#include <avr/io.h>

//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x30>
  cc:	8f 7e       	andi	r24, 0xEF	; 239
			tempC=setBit(tempC,4,1);
		}else{
			tempC=setBit(tempC,4,0);
		}
		//Set PC3
		if(PINA>=5){
  ce:	90 b1       	in	r25, 0x00	; 0
  d0:	95 30       	cpi	r25, 0x05	; 5
  d2:	10 f0       	brcs	.+4      	; 0xd8 <main+0x3a>

#include <avr/io.h>

//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x3c>
  d8:	87 7f       	andi	r24, 0xF7	; 247
			tempC=setBit(tempC,3,1);
		}else{
			tempC=setBit(tempC,3,0);
		}
		//Set PC2
		if(PINA>=7){
  da:	90 b1       	in	r25, 0x00	; 0
  dc:	97 30       	cpi	r25, 0x07	; 7
  de:	10 f0       	brcs	.+4      	; 0xe4 <main+0x46>

#include <avr/io.h>

//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <main+0x48>
  e4:	8b 7f       	andi	r24, 0xFB	; 251
			tempC=setBit(tempC,2,1);
		}else{
			tempC=setBit(tempC,2,0);
		}
		//Set PC1
		if(PINA>=10){
  e6:	90 b1       	in	r25, 0x00	; 0
  e8:	9a 30       	cpi	r25, 0x0A	; 10
  ea:	10 f0       	brcs	.+4      	; 0xf0 <main+0x52>

#include <avr/io.h>

//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x54>
  f0:	8d 7f       	andi	r24, 0xFD	; 253
			tempC=setBit(tempC,1,1);
		}else{
			tempC=setBit(tempC,1,0);
		}
		//Set PC0
		if(PINA>=13){
  f2:	90 b1       	in	r25, 0x00	; 0
  f4:	9d 30       	cpi	r25, 0x0D	; 13
  f6:	10 f0       	brcs	.+4      	; 0xfc <main+0x5e>

#include <avr/io.h>

//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	01 c0       	rjmp	.+2      	; 0xfe <main+0x60>
  fc:	8e 7f       	andi	r24, 0xFE	; 254
			tempC=setBit(tempC,0,1);
		}else{
			tempC=setBit(tempC,0,0);
		}
		//Output to register C
		PORTC = tempC;
  fe:	88 b9       	out	0x08, r24	; 8
	}
 100:	d4 cf       	rjmp	.-88     	; 0xaa <main+0xc>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
