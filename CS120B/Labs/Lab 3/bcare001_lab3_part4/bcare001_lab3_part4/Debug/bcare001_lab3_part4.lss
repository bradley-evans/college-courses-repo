
bcare001_lab3_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000546  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000010e  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000281  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001dc  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b2  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	52 00       	.word	0x0052	; ????
  56:	56 00       	.word	0x0056	; ????
  58:	71 00       	.word	0x0071	; ????
  5a:	98 00       	.word	0x0098	; ????
  5c:	bc 00       	.word	0x00bc	; ????
  5e:	d7 00       	.word	0x00d7	; ????
  60:	00 01       	movw	r0, r0

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	a3 36       	cpi	r26, 0x63	; 99
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  82:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <lock>:
    return ((x & (0x01 << k)) != 0);
}	
enum LOCK_States { LOCK_init_0, LOCK_wait_1, LOCK_input1_2, LOCK_wait_3, LOCK_wait_4, LOCK_input2_5, LOCK_toggle_6 } LOCK_State;

void lock() {
	switch(LOCK_State) {
  8a:	e0 91 61 00 	lds	r30, 0x0061
  8e:	8e 2f       	mov	r24, r30
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	87 30       	cpi	r24, 0x07	; 7
  94:	91 05       	cpc	r25, r1
  96:	08 f0       	brcs	.+2      	; 0x9a <lock+0x10>
  98:	b7 c0       	rjmp	.+366    	; 0x208 <lock+0x17e>
  9a:	fc 01       	movw	r30, r24
  9c:	e6 5d       	subi	r30, 0xD6	; 214
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__tablejump2__>
		case LOCK_init_0:
			LOCK_State = LOCK_wait_1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 61 00 	sts	0x0061, r24
			break;
  aa:	cd c0       	rjmp	.+410    	; 0x246 <lock+0x1bc>
		case LOCK_wait_1:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
  ac:	c8 99       	sbic	0x19, 0	; 25
  ae:	0d c0       	rjmp	.+26     	; 0xca <lock+0x40>
  b0:	c9 99       	sbic	0x19, 1	; 25
  b2:	0b c0       	rjmp	.+22     	; 0xca <lock+0x40>
  b4:	ca 99       	sbic	0x19, 2	; 25
  b6:	09 c0       	rjmp	.+18     	; 0xca <lock+0x40>
  b8:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	88 0f       	add	r24, r24
  be:	89 2f       	mov	r24, r25
  c0:	88 1f       	adc	r24, r24
  c2:	99 0b       	sbc	r25, r25
  c4:	91 95       	neg	r25
	switch(LOCK_State) {
		case LOCK_init_0:
			LOCK_State = LOCK_wait_1;
			break;
		case LOCK_wait_1:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
  c6:	89 2b       	or	r24, r25
  c8:	21 f0       	breq	.+8      	; 0xd2 <lock+0x48>
				LOCK_State = LOCK_input1_2;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 61 00 	sts	0x0061, r24
  d0:	c1 c0       	rjmp	.+386    	; 0x254 <lock+0x1ca>
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
  d2:	c8 99       	sbic	0x19, 0	; 25
  d4:	b8 c0       	rjmp	.+368    	; 0x246 <lock+0x1bc>
  d6:	c9 99       	sbic	0x19, 1	; 25
  d8:	b6 c0       	rjmp	.+364    	; 0x246 <lock+0x1bc>
  da:	ca 99       	sbic	0x19, 2	; 25
  dc:	b4 c0       	rjmp	.+360    	; 0x246 <lock+0x1bc>
  de:	89 b3       	in	r24, 0x19	; 25
  e0:	b2 c0       	rjmp	.+356    	; 0x246 <lock+0x1bc>
				LOCK_State = LOCK_wait_1;
			}
			break;
		case LOCK_input1_2:
			if (getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7)) {
  e2:	c8 99       	sbic	0x19, 0	; 25
  e4:	0d c0       	rjmp	.+26     	; 0x100 <lock+0x76>
  e6:	c9 99       	sbic	0x19, 1	; 25
  e8:	0b c0       	rjmp	.+22     	; 0x100 <lock+0x76>
  ea:	ca 9b       	sbis	0x19, 2	; 25
  ec:	09 c0       	rjmp	.+18     	; 0x100 <lock+0x76>
  ee:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	88 0f       	add	r24, r24
  f4:	89 2f       	mov	r24, r25
  f6:	88 1f       	adc	r24, r24
  f8:	99 0b       	sbc	r25, r25
  fa:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_1;
			}
			break;
		case LOCK_input1_2:
			if (getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7)) {
  fc:	89 2b       	or	r24, r25
  fe:	21 f0       	breq	.+8      	; 0x108 <lock+0x7e>
				LOCK_State = LOCK_wait_1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 61 00 	sts	0x0061, r24
 106:	9f c0       	rjmp	.+318    	; 0x246 <lock+0x1bc>
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7))) {
 108:	c8 99       	sbic	0x19, 0	; 25
 10a:	a4 c0       	rjmp	.+328    	; 0x254 <lock+0x1ca>
 10c:	c9 99       	sbic	0x19, 1	; 25
 10e:	a2 c0       	rjmp	.+324    	; 0x254 <lock+0x1ca>
 110:	ca 9b       	sbis	0x19, 2	; 25
 112:	a0 c0       	rjmp	.+320    	; 0x254 <lock+0x1ca>
 114:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	88 0f       	add	r24, r24
 11a:	89 2f       	mov	r24, r25
 11c:	88 1f       	adc	r24, r24
 11e:	99 0b       	sbc	r25, r25
 120:	91 95       	neg	r25
			break;
		case LOCK_input1_2:
			if (getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7)) {
				LOCK_State = LOCK_wait_1;
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7))) {
 122:	89 2b       	or	r24, r25
 124:	09 f0       	breq	.+2      	; 0x128 <lock+0x9e>
 126:	96 c0       	rjmp	.+300    	; 0x254 <lock+0x1ca>
				LOCK_State = LOCK_wait_3;
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	80 93 61 00 	sts	0x0061, r24
 12e:	99 c0       	rjmp	.+306    	; 0x262 <lock+0x1d8>
			}
			break;
		case LOCK_wait_3:
			if (getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7)) {
 130:	c8 99       	sbic	0x19, 0	; 25
 132:	97 c0       	rjmp	.+302    	; 0x262 <lock+0x1d8>
 134:	c9 99       	sbic	0x19, 1	; 25
 136:	95 c0       	rjmp	.+298    	; 0x262 <lock+0x1d8>
 138:	ca 99       	sbic	0x19, 2	; 25
 13a:	93 c0       	rjmp	.+294    	; 0x262 <lock+0x1d8>
 13c:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	88 0f       	add	r24, r24
 142:	89 2f       	mov	r24, r25
 144:	88 1f       	adc	r24, r24
 146:	99 0b       	sbc	r25, r25
 148:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_3;
			}
			break;
		case LOCK_wait_3:
			if (getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7)) {
 14a:	89 2b       	or	r24, r25
 14c:	09 f0       	breq	.+2      	; 0x150 <lock+0xc6>
 14e:	89 c0       	rjmp	.+274    	; 0x262 <lock+0x1d8>
				LOCK_State = LOCK_wait_3;
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 150:	c8 99       	sbic	0x19, 0	; 25
 152:	87 c0       	rjmp	.+270    	; 0x262 <lock+0x1d8>
 154:	c9 99       	sbic	0x19, 1	; 25
 156:	85 c0       	rjmp	.+266    	; 0x262 <lock+0x1d8>
 158:	ca 99       	sbic	0x19, 2	; 25
 15a:	83 c0       	rjmp	.+262    	; 0x262 <lock+0x1d8>
 15c:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	88 0f       	add	r24, r24
 162:	89 2f       	mov	r24, r25
 164:	88 1f       	adc	r24, r24
 166:	99 0b       	sbc	r25, r25
 168:	91 95       	neg	r25
			break;
		case LOCK_wait_3:
			if (getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7)) {
				LOCK_State = LOCK_wait_3;
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 16a:	89 2b       	or	r24, r25
 16c:	09 f0       	breq	.+2      	; 0x170 <lock+0xe6>
 16e:	79 c0       	rjmp	.+242    	; 0x262 <lock+0x1d8>
				LOCK_State = LOCK_wait_4;
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	80 93 61 00 	sts	0x0061, r24
 176:	7c c0       	rjmp	.+248    	; 0x270 <lock+0x1e6>
			}
		break;
		case LOCK_wait_4:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 178:	c8 99       	sbic	0x19, 0	; 25
 17a:	0d c0       	rjmp	.+26     	; 0x196 <lock+0x10c>
 17c:	c9 99       	sbic	0x19, 1	; 25
 17e:	0b c0       	rjmp	.+22     	; 0x196 <lock+0x10c>
 180:	ca 99       	sbic	0x19, 2	; 25
 182:	09 c0       	rjmp	.+18     	; 0x196 <lock+0x10c>
 184:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	88 0f       	add	r24, r24
 18a:	89 2f       	mov	r24, r25
 18c:	88 1f       	adc	r24, r24
 18e:	99 0b       	sbc	r25, r25
 190:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_4;
			}
		break;
		case LOCK_wait_4:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 192:	89 2b       	or	r24, r25
 194:	21 f0       	breq	.+8      	; 0x19e <lock+0x114>
				LOCK_State = LOCK_input2_5;
 196:	85 e0       	ldi	r24, 0x05	; 5
 198:	80 93 61 00 	sts	0x0061, r24
 19c:	70 c0       	rjmp	.+224    	; 0x27e <lock+0x1f4>
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 19e:	c8 99       	sbic	0x19, 0	; 25
 1a0:	67 c0       	rjmp	.+206    	; 0x270 <lock+0x1e6>
 1a2:	c9 99       	sbic	0x19, 1	; 25
 1a4:	65 c0       	rjmp	.+202    	; 0x270 <lock+0x1e6>
 1a6:	ca 99       	sbic	0x19, 2	; 25
 1a8:	63 c0       	rjmp	.+198    	; 0x270 <lock+0x1e6>
 1aa:	89 b3       	in	r24, 0x19	; 25
 1ac:	61 c0       	rjmp	.+194    	; 0x270 <lock+0x1e6>
				LOCK_State = LOCK_wait_4;
			}
			break;
		case LOCK_input2_5:
			if (!(getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1ae:	c8 99       	sbic	0x19, 0	; 25
 1b0:	13 c0       	rjmp	.+38     	; 0x1d8 <lock+0x14e>
 1b2:	c9 9b       	sbis	0x19, 1	; 25
 1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <lock+0x14e>
 1b6:	ca 99       	sbic	0x19, 2	; 25
 1b8:	0f c0       	rjmp	.+30     	; 0x1d8 <lock+0x14e>
 1ba:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	88 0f       	add	r24, r24
 1c0:	89 2f       	mov	r24, r25
 1c2:	88 1f       	adc	r24, r24
 1c4:	99 0b       	sbc	r25, r25
 1c6:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_4;
			}
			break;
		case LOCK_input2_5:
			if (!(getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1c8:	89 2b       	or	r24, r25
 1ca:	31 f4       	brne	.+12     	; 0x1d8 <lock+0x14e>
				
				LOCK_State = LOCK_toggle_6;
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	80 93 61 00 	sts	0x0061, r24
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,1);
			break;
		case LOCK_toggle_6:
			if(getBit(PINB,0)){
 1d2:	b0 99       	sbic	0x16, 0	; 22
 1d4:	26 c0       	rjmp	.+76     	; 0x222 <lock+0x198>
 1d6:	2b c0       	rjmp	.+86     	; 0x22e <lock+0x1a4>
		case LOCK_input2_5:
			if (!(getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				
				LOCK_State = LOCK_toggle_6;
			}
			else if ((getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1d8:	c8 99       	sbic	0x19, 0	; 25
 1da:	0e c0       	rjmp	.+28     	; 0x1f8 <lock+0x16e>
 1dc:	c9 9b       	sbis	0x19, 1	; 25
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <lock+0x16e>
 1e0:	ca 99       	sbic	0x19, 2	; 25
 1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <lock+0x16e>
 1e4:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	88 0f       	add	r24, r24
 1ea:	89 2f       	mov	r24, r25
 1ec:	88 1f       	adc	r24, r24
 1ee:	99 0b       	sbc	r25, r25
 1f0:	91 95       	neg	r25
		case LOCK_input2_5:
			if (!(getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				
				LOCK_State = LOCK_toggle_6;
			}
			else if ((getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1f2:	89 2b       	or	r24, r25
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <lock+0x16e>
 1f6:	43 c0       	rjmp	.+134    	; 0x27e <lock+0x1f4>
				LOCK_State = LOCK_wait_1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 61 00 	sts	0x0061, r24
 1fe:	23 c0       	rjmp	.+70     	; 0x246 <lock+0x1bc>
			}
			break;
		case LOCK_toggle_6:
			LOCK_State = LOCK_wait_1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 61 00 	sts	0x0061, r24
			break;
 206:	1f c0       	rjmp	.+62     	; 0x246 <lock+0x1bc>
		default:
			LOCK_State = LOCK_init_0;
 208:	10 92 61 00 	sts	0x0061, r1
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 20c:	80 91 60 00 	lds	r24, 0x0060
 210:	8e 7f       	andi	r24, 0xFE	; 254
			LOCK_State = LOCK_init_0;
	} // Transitions

	switch(LOCK_State) { // State actions
		case LOCK_init_0:
			tempB=setBit(tempB,0,0);
 212:	80 93 60 00 	sts	0x0060, r24
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 216:	80 91 62 00 	lds	r24, 0x0062
 21a:	83 7e       	andi	r24, 0xE3	; 227
	switch(LOCK_State) { // State actions
		case LOCK_init_0:
			tempB=setBit(tempB,0,0);
			tempC=setBit(tempC,2,0);
			tempC=setBit(tempC,3,0);
			tempC=setBit(tempC,4,0);
 21c:	80 93 62 00 	sts	0x0062, r24
			break;
 220:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 222:	80 91 60 00 	lds	r24, 0x0060
 226:	8e 7f       	andi	r24, 0xFE	; 254
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,1);
			break;
		case LOCK_toggle_6:
			if(getBit(PINB,0)){
				tempB=setBit(tempB,0,0);
 228:	80 93 60 00 	sts	0x0060, r24
 22c:	05 c0       	rjmp	.+10     	; 0x238 <lock+0x1ae>
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 22e:	80 91 60 00 	lds	r24, 0x0060
 232:	81 60       	ori	r24, 0x01	; 1
			break;
		case LOCK_toggle_6:
			if(getBit(PINB,0)){
				tempB=setBit(tempB,0,0);
			}else{
				tempB=setBit(tempB,0,1);
 234:	80 93 60 00 	sts	0x0060, r24
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 238:	80 91 62 00 	lds	r24, 0x0062
 23c:	8e 7f       	andi	r24, 0xFE	; 254
 23e:	86 60       	ori	r24, 0x06	; 6
				tempB=setBit(tempB,0,1);
			}
			
			tempC=setBit(tempC,0,0);
			tempC=setBit(tempC,1,1);
			tempC=setBit(tempC,2,1);
 240:	80 93 62 00 	sts	0x0062, r24
			break;
 244:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 246:	80 91 62 00 	lds	r24, 0x0062
 24a:	89 7f       	andi	r24, 0xF9	; 249
 24c:	81 60       	ori	r24, 0x01	; 1
			tempC=setBit(tempC,4,0);
			break;
		case LOCK_wait_1:
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,0);
 24e:	80 93 62 00 	sts	0x0062, r24
			break;
 252:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 254:	80 91 62 00 	lds	r24, 0x0062
 258:	8a 7f       	andi	r24, 0xFA	; 250
 25a:	82 60       	ori	r24, 0x02	; 2
			tempC=setBit(tempC,2,0);
			break;
		case LOCK_input1_2:
			tempC=setBit(tempC,0,0);
			tempC=setBit(tempC,1,1);
			tempC=setBit(tempC,2,0);
 25c:	80 93 62 00 	sts	0x0062, r24
			break;
 260:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 262:	80 91 62 00 	lds	r24, 0x0062
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	83 60       	ori	r24, 0x03	; 3
			tempC=setBit(tempC,2,0);
			break;
		case LOCK_wait_3:
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,1);
			tempC=setBit(tempC,2,0);
 26a:	80 93 62 00 	sts	0x0062, r24
			break;
 26e:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 270:	80 91 62 00 	lds	r24, 0x0062
 274:	8c 7f       	andi	r24, 0xFC	; 252
 276:	84 60       	ori	r24, 0x04	; 4
			tempC=setBit(tempC,2,0);
			break;
		case LOCK_wait_4:
			tempC=setBit(tempC,0,0);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,1);
 278:	80 93 62 00 	sts	0x0062, r24
			break;
 27c:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 27e:	80 91 62 00 	lds	r24, 0x0062
 282:	8d 7f       	andi	r24, 0xFD	; 253
 284:	85 60       	ori	r24, 0x05	; 5
			tempC=setBit(tempC,2,1);
			break;
		case LOCK_input2_5:
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,1);
 286:	80 93 62 00 	sts	0x0062, r24
 28a:	08 95       	ret

0000028c <main>:
		break;
	} // State actions

}
int main() {
	DDRA = 0x00;
 28c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 292:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
 294:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
 296:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
 298:	15 ba       	out	0x15, r1	; 21
	LOCK_State = -1; // Initial state
 29a:	80 93 61 00 	sts	0x0061, r24
	tempB = 0x00; // Initial outputs
 29e:	10 92 60 00 	sts	0x0060, r1

	while(1) {
		lock();
 2a2:	0e 94 45 00 	call	0x8a	; 0x8a <lock>
		PORTB = tempB;
 2a6:	80 91 60 00 	lds	r24, 0x0060
 2aa:	88 bb       	out	0x18, r24	; 24
		PORTC = tempC;
 2ac:	80 91 62 00 	lds	r24, 0x0062
 2b0:	85 bb       	out	0x15, r24	; 21
	} 
 2b2:	f7 cf       	rjmp	.-18     	; 0x2a2 <main+0x16>

000002b4 <__tablejump2__>:
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	05 90       	lpm	r0, Z+
 2ba:	f4 91       	lpm	r31, Z
 2bc:	e0 2d       	mov	r30, r0
 2be:	09 94       	ijmp

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
