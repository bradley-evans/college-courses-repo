
bcare001_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000053d  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000010e  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027d  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001dc  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a2  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	52 00       	.word	0x0052	; ????
  56:	56 00       	.word	0x0056	; ????
  58:	71 00       	.word	0x0071	; ????
  5a:	97 00       	.word	0x0097	; ????
  5c:	bb 00       	.word	0x00bb	; ????
  5e:	d6 00       	.word	0x00d6	; ????
  60:	fb 00       	.word	0x00fb	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	a3 36       	cpi	r26, 0x63	; 99
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  82:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <lock>:
    return ((x & (0x01 << k)) != 0);
}	
enum LOCK_States { LOCK_init_0, LOCK_wait_1, LOCK_input1_2, LOCK_wait_3, LOCK_wait_4, LOCK_input2_5, LOCK_unlock_6 } LOCK_State;

void lock() {
	switch(LOCK_State) {
  8a:	e0 91 61 00 	lds	r30, 0x0061
  8e:	8e 2f       	mov	r24, r30
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	87 30       	cpi	r24, 0x07	; 7
  94:	91 05       	cpc	r25, r1
  96:	08 f0       	brcs	.+2      	; 0x9a <lock+0x10>
  98:	bc c0       	rjmp	.+376    	; 0x212 <lock+0x188>
  9a:	fc 01       	movw	r30, r24
  9c:	e6 5d       	subi	r30, 0xD6	; 214
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__tablejump2__>
		case LOCK_init_0:
			LOCK_State = LOCK_wait_1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 61 00 	sts	0x0061, r24
			break;
  aa:	d4 c0       	rjmp	.+424    	; 0x254 <lock+0x1ca>
		case LOCK_wait_1:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
  ac:	c8 99       	sbic	0x19, 0	; 25
  ae:	0d c0       	rjmp	.+26     	; 0xca <lock+0x40>
  b0:	c9 99       	sbic	0x19, 1	; 25
  b2:	0b c0       	rjmp	.+22     	; 0xca <lock+0x40>
  b4:	ca 99       	sbic	0x19, 2	; 25
  b6:	09 c0       	rjmp	.+18     	; 0xca <lock+0x40>
  b8:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	88 0f       	add	r24, r24
  be:	89 2f       	mov	r24, r25
  c0:	88 1f       	adc	r24, r24
  c2:	99 0b       	sbc	r25, r25
  c4:	91 95       	neg	r25
	switch(LOCK_State) {
		case LOCK_init_0:
			LOCK_State = LOCK_wait_1;
			break;
		case LOCK_wait_1:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
  c6:	89 2b       	or	r24, r25
  c8:	21 f0       	breq	.+8      	; 0xd2 <lock+0x48>
				LOCK_State = LOCK_input1_2;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 61 00 	sts	0x0061, r24
  d0:	c8 c0       	rjmp	.+400    	; 0x262 <lock+0x1d8>
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
  d2:	c8 99       	sbic	0x19, 0	; 25
  d4:	bf c0       	rjmp	.+382    	; 0x254 <lock+0x1ca>
  d6:	c9 99       	sbic	0x19, 1	; 25
  d8:	bd c0       	rjmp	.+378    	; 0x254 <lock+0x1ca>
  da:	ca 99       	sbic	0x19, 2	; 25
  dc:	bb c0       	rjmp	.+374    	; 0x254 <lock+0x1ca>
  de:	89 b3       	in	r24, 0x19	; 25
  e0:	b9 c0       	rjmp	.+370    	; 0x254 <lock+0x1ca>
				LOCK_State = LOCK_wait_1;
			}
			break;
		case LOCK_input1_2:
			if (getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7)) {
  e2:	c8 99       	sbic	0x19, 0	; 25
  e4:	0d c0       	rjmp	.+26     	; 0x100 <lock+0x76>
  e6:	c9 99       	sbic	0x19, 1	; 25
  e8:	0b c0       	rjmp	.+22     	; 0x100 <lock+0x76>
  ea:	ca 9b       	sbis	0x19, 2	; 25
  ec:	09 c0       	rjmp	.+18     	; 0x100 <lock+0x76>
  ee:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	88 0f       	add	r24, r24
  f4:	89 2f       	mov	r24, r25
  f6:	88 1f       	adc	r24, r24
  f8:	99 0b       	sbc	r25, r25
  fa:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_1;
			}
			break;
		case LOCK_input1_2:
			if (getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7)) {
  fc:	89 2b       	or	r24, r25
  fe:	19 f0       	breq	.+6      	; 0x106 <lock+0x7c>
				LOCK_State = LOCK_init_0;
 100:	10 92 61 00 	sts	0x0061, r1
 104:	9c c0       	rjmp	.+312    	; 0x23e <lock+0x1b4>
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7))) {
 106:	c8 99       	sbic	0x19, 0	; 25
 108:	ac c0       	rjmp	.+344    	; 0x262 <lock+0x1d8>
 10a:	c9 99       	sbic	0x19, 1	; 25
 10c:	aa c0       	rjmp	.+340    	; 0x262 <lock+0x1d8>
 10e:	ca 9b       	sbis	0x19, 2	; 25
 110:	a8 c0       	rjmp	.+336    	; 0x262 <lock+0x1d8>
 112:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	88 0f       	add	r24, r24
 118:	89 2f       	mov	r24, r25
 11a:	88 1f       	adc	r24, r24
 11c:	99 0b       	sbc	r25, r25
 11e:	91 95       	neg	r25
			break;
		case LOCK_input1_2:
			if (getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7)) {
				LOCK_State = LOCK_init_0;
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7))) {
 120:	89 2b       	or	r24, r25
 122:	09 f0       	breq	.+2      	; 0x126 <lock+0x9c>
 124:	9e c0       	rjmp	.+316    	; 0x262 <lock+0x1d8>
				LOCK_State = LOCK_wait_3;
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	80 93 61 00 	sts	0x0061, r24
 12c:	a1 c0       	rjmp	.+322    	; 0x270 <lock+0x1e6>
			}
			break;
		case LOCK_wait_3:
			if (getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7)) {
 12e:	c8 99       	sbic	0x19, 0	; 25
 130:	9f c0       	rjmp	.+318    	; 0x270 <lock+0x1e6>
 132:	c9 99       	sbic	0x19, 1	; 25
 134:	9d c0       	rjmp	.+314    	; 0x270 <lock+0x1e6>
 136:	ca 99       	sbic	0x19, 2	; 25
 138:	9b c0       	rjmp	.+310    	; 0x270 <lock+0x1e6>
 13a:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	88 0f       	add	r24, r24
 140:	89 2f       	mov	r24, r25
 142:	88 1f       	adc	r24, r24
 144:	99 0b       	sbc	r25, r25
 146:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||!getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_3;
			}
			break;
		case LOCK_wait_3:
			if (getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7)) {
 148:	89 2b       	or	r24, r25
 14a:	09 f0       	breq	.+2      	; 0x14e <lock+0xc4>
 14c:	91 c0       	rjmp	.+290    	; 0x270 <lock+0x1e6>
				LOCK_State = LOCK_wait_3;
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 14e:	c8 99       	sbic	0x19, 0	; 25
 150:	8f c0       	rjmp	.+286    	; 0x270 <lock+0x1e6>
 152:	c9 99       	sbic	0x19, 1	; 25
 154:	8d c0       	rjmp	.+282    	; 0x270 <lock+0x1e6>
 156:	ca 99       	sbic	0x19, 2	; 25
 158:	8b c0       	rjmp	.+278    	; 0x270 <lock+0x1e6>
 15a:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	88 0f       	add	r24, r24
 160:	89 2f       	mov	r24, r25
 162:	88 1f       	adc	r24, r24
 164:	99 0b       	sbc	r25, r25
 166:	91 95       	neg	r25
			break;
		case LOCK_wait_3:
			if (getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7)) {
				LOCK_State = LOCK_wait_3;
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 168:	89 2b       	or	r24, r25
 16a:	09 f0       	breq	.+2      	; 0x16e <lock+0xe4>
 16c:	81 c0       	rjmp	.+258    	; 0x270 <lock+0x1e6>
				LOCK_State = LOCK_wait_4;
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	80 93 61 00 	sts	0x0061, r24
 174:	84 c0       	rjmp	.+264    	; 0x27e <lock+0x1f4>
			}
		break;
		case LOCK_wait_4:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 176:	c8 99       	sbic	0x19, 0	; 25
 178:	0d c0       	rjmp	.+26     	; 0x194 <lock+0x10a>
 17a:	c9 99       	sbic	0x19, 1	; 25
 17c:	0b c0       	rjmp	.+22     	; 0x194 <lock+0x10a>
 17e:	ca 99       	sbic	0x19, 2	; 25
 180:	09 c0       	rjmp	.+18     	; 0x194 <lock+0x10a>
 182:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	88 0f       	add	r24, r24
 188:	89 2f       	mov	r24, r25
 18a:	88 1f       	adc	r24, r24
 18c:	99 0b       	sbc	r25, r25
 18e:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_4;
			}
		break;
		case LOCK_wait_4:
			if ((getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 190:	89 2b       	or	r24, r25
 192:	21 f0       	breq	.+8      	; 0x19c <lock+0x112>
				LOCK_State = LOCK_input2_5;
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	80 93 61 00 	sts	0x0061, r24
 19a:	3e c0       	rjmp	.+124    	; 0x218 <lock+0x18e>
			}
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 19c:	c8 99       	sbic	0x19, 0	; 25
 19e:	6f c0       	rjmp	.+222    	; 0x27e <lock+0x1f4>
 1a0:	c9 99       	sbic	0x19, 1	; 25
 1a2:	6d c0       	rjmp	.+218    	; 0x27e <lock+0x1f4>
 1a4:	ca 99       	sbic	0x19, 2	; 25
 1a6:	6b c0       	rjmp	.+214    	; 0x27e <lock+0x1f4>
 1a8:	89 b3       	in	r24, 0x19	; 25
 1aa:	69 c0       	rjmp	.+210    	; 0x27e <lock+0x1f4>
				LOCK_State = LOCK_wait_4;
			}
			break;
		case LOCK_input2_5:
			if (!(getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1ac:	c8 99       	sbic	0x19, 0	; 25
 1ae:	11 c0       	rjmp	.+34     	; 0x1d2 <lock+0x148>
 1b0:	c9 9b       	sbis	0x19, 1	; 25
 1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <lock+0x148>
 1b4:	ca 99       	sbic	0x19, 2	; 25
 1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <lock+0x148>
 1b8:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	88 0f       	add	r24, r24
 1be:	89 2f       	mov	r24, r25
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 0b       	sbc	r25, r25
 1c4:	91 95       	neg	r25
			else if (!(getBit(PINA,0)||getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_wait_4;
			}
			break;
		case LOCK_input2_5:
			if (!(getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1c6:	89 2b       	or	r24, r25
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <lock+0x148>
				
				LOCK_State = LOCK_unlock_6;
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	80 93 61 00 	sts	0x0061, r24
 1d0:	2a c0       	rjmp	.+84     	; 0x226 <lock+0x19c>
			}
			else if ((getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1d2:	c8 99       	sbic	0x19, 0	; 25
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <lock+0x166>
 1d6:	c9 9b       	sbis	0x19, 1	; 25
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <lock+0x166>
 1da:	ca 99       	sbic	0x19, 2	; 25
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <lock+0x166>
 1de:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	88 0f       	add	r24, r24
 1e4:	89 2f       	mov	r24, r25
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 0b       	sbc	r25, r25
 1ea:	91 95       	neg	r25
		case LOCK_input2_5:
			if (!(getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				
				LOCK_State = LOCK_unlock_6;
			}
			else if ((getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
 1ec:	89 2b       	or	r24, r25
 1ee:	a1 f0       	breq	.+40     	; 0x218 <lock+0x18e>
				LOCK_State = LOCK_init_0;
 1f0:	10 92 61 00 	sts	0x0061, r1
 1f4:	24 c0       	rjmp	.+72     	; 0x23e <lock+0x1b4>
			}
			break;
		case LOCK_unlock_6:
			if (getBit(PINA,7)) {
 1f6:	89 b3       	in	r24, 0x19	; 25
//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	88 0f       	add	r24, r24
 1fc:	89 2f       	mov	r24, r25
 1fe:	88 1f       	adc	r24, r24
 200:	99 0b       	sbc	r25, r25
 202:	91 95       	neg	r25
			else if ((getBit(PINA,0)||!getBit(PINA,1)||getBit(PINA,2)||getBit(PINA,7))) {
				LOCK_State = LOCK_init_0;
			}
			break;
		case LOCK_unlock_6:
			if (getBit(PINA,7)) {
 204:	89 2b       	or	r24, r25
 206:	19 f0       	breq	.+6      	; 0x20e <lock+0x184>
				LOCK_State = LOCK_init_0;
 208:	10 92 61 00 	sts	0x0061, r1
 20c:	18 c0       	rjmp	.+48     	; 0x23e <lock+0x1b4>
			}
			else if (!getBit(PINA,7)) {
 20e:	89 b3       	in	r24, 0x19	; 25
 210:	0a c0       	rjmp	.+20     	; 0x226 <lock+0x19c>
				LOCK_State = LOCK_unlock_6;
			}
			break;
		default:
			LOCK_State = LOCK_init_0;
 212:	10 92 61 00 	sts	0x0061, r1
 216:	13 c0       	rjmp	.+38     	; 0x23e <lock+0x1b4>
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 218:	80 91 62 00 	lds	r24, 0x0062
 21c:	8d 7f       	andi	r24, 0xFD	; 253
 21e:	85 60       	ori	r24, 0x05	; 5
			tempC=setBit(tempC,2,1);
			break;
		case LOCK_input2_5:
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,1);
 220:	80 93 62 00 	sts	0x0062, r24
			break;
 224:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 226:	80 91 60 00 	lds	r24, 0x0060
 22a:	81 60       	ori	r24, 0x01	; 1
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,1);
			break;
		case LOCK_unlock_6:
			tempB=setBit(tempB,0,1);
 22c:	80 93 60 00 	sts	0x0060, r24
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 230:	80 91 62 00 	lds	r24, 0x0062
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	86 60       	ori	r24, 0x06	; 6
			break;
		case LOCK_unlock_6:
			tempB=setBit(tempB,0,1);
			tempC=setBit(tempC,0,0);
			tempC=setBit(tempC,1,1);
			tempC=setBit(tempC,2,1);
 238:	80 93 62 00 	sts	0x0062, r24
			break;
 23c:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 23e:	80 91 60 00 	lds	r24, 0x0060
 242:	8e 7f       	andi	r24, 0xFE	; 254
			LOCK_State = LOCK_init_0;
	} // Transitions

	switch(LOCK_State) { // State actions
		case LOCK_init_0:
			tempB=setBit(tempB,0,0);
 244:	80 93 60 00 	sts	0x0060, r24
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 248:	80 91 62 00 	lds	r24, 0x0062
 24c:	83 7e       	andi	r24, 0xE3	; 227
	switch(LOCK_State) { // State actions
		case LOCK_init_0:
			tempB=setBit(tempB,0,0);
			tempC=setBit(tempC,2,0);
			tempC=setBit(tempC,3,0);
			tempC=setBit(tempC,4,0);
 24e:	80 93 62 00 	sts	0x0062, r24
			break;
 252:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 254:	80 91 62 00 	lds	r24, 0x0062
 258:	89 7f       	andi	r24, 0xF9	; 249
 25a:	81 60       	ori	r24, 0x01	; 1
			tempC=setBit(tempC,4,0);
			break;
		case LOCK_wait_1:
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,0);
 25c:	80 93 62 00 	sts	0x0062, r24
			break;
 260:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 262:	80 91 62 00 	lds	r24, 0x0062
 266:	8a 7f       	andi	r24, 0xFA	; 250
 268:	82 60       	ori	r24, 0x02	; 2
			tempC=setBit(tempC,2,0);
			break;
		case LOCK_input1_2:
			tempC=setBit(tempC,0,0);
			tempC=setBit(tempC,1,1);
			tempC=setBit(tempC,2,0);
 26a:	80 93 62 00 	sts	0x0062, r24
			break;
 26e:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 270:	80 91 62 00 	lds	r24, 0x0062
 274:	8b 7f       	andi	r24, 0xFB	; 251
 276:	83 60       	ori	r24, 0x03	; 3
			tempC=setBit(tempC,2,0);
			break;
		case LOCK_wait_3:
			tempC=setBit(tempC,0,1);
			tempC=setBit(tempC,1,1);
			tempC=setBit(tempC,2,0);
 278:	80 93 62 00 	sts	0x0062, r24
			break;
 27c:	08 95       	ret
unsigned char tempB;
unsigned char tempC;

//Functions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 27e:	80 91 62 00 	lds	r24, 0x0062
 282:	8c 7f       	andi	r24, 0xFC	; 252
 284:	84 60       	ori	r24, 0x04	; 4
			tempC=setBit(tempC,2,0);
			break;
		case LOCK_wait_4:
			tempC=setBit(tempC,0,0);
			tempC=setBit(tempC,1,0);
			tempC=setBit(tempC,2,1);
 286:	80 93 62 00 	sts	0x0062, r24
 28a:	08 95       	ret

0000028c <main>:
		break;
	} // State actions

}
int main() {
	DDRA = 0x00;
 28c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 292:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
 294:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
 296:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
 298:	15 ba       	out	0x15, r1	; 21
	LOCK_State = -1; // Initial state
 29a:	80 93 61 00 	sts	0x0061, r24
	tempB = 0x00; // Init outputs
 29e:	10 92 60 00 	sts	0x0060, r1

	while(1) {
		lock();
 2a2:	0e 94 45 00 	call	0x8a	; 0x8a <lock>
		PORTB = tempB;
 2a6:	80 91 60 00 	lds	r24, 0x0060
 2aa:	88 bb       	out	0x18, r24	; 24
		PORTC = tempC;
 2ac:	80 91 62 00 	lds	r24, 0x0062
 2b0:	85 bb       	out	0x15, r24	; 21
	} 
 2b2:	f7 cf       	rjmp	.-18     	; 0x2a2 <main+0x16>

000002b4 <__tablejump2__>:
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	05 90       	lpm	r0, Z+
 2ba:	f4 91       	lpm	r31, Z
 2bc:	e0 2d       	mov	r30, r0
 2be:	09 94       	ijmp

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
