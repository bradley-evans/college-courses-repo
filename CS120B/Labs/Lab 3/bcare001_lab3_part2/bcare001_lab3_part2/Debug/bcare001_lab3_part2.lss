
bcare001_lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000183  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000101  00000000  00000000  0000041f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ee  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a5  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	5a d0       	rcall	.+180    	; 0x15e <main>
  aa:	67 c0       	rjmp	.+206    	; 0x17a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <counter>:

unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
}	
void counter(){
	switch(CNT_State){
  ae:	80 91 00 01 	lds	r24, 0x0100
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	b9 f0       	breq	.+46     	; 0xe4 <counter+0x36>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <counter+0x14>
  b8:	88 23       	and	r24, r24
  ba:	41 f0       	breq	.+16     	; 0xcc <counter+0x1e>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	71 f0       	breq	.+28     	; 0xdc <counter+0x2e>
  c0:	2e c0       	rjmp	.+92     	; 0x11e <counter+0x70>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	39 f0       	breq	.+14     	; 0xd4 <counter+0x26>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	89 f0       	breq	.+34     	; 0xec <counter+0x3e>
  ca:	29 c0       	rjmp	.+82     	; 0x11e <counter+0x70>
		case CNT_init:
			CNT_State = CNT_wait;
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 93 00 01 	sts	0x0100, r24
			break;
  d2:	08 95       	ret
		case CNT_rst:
			CNT_State = CNT_wait;
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	80 93 00 01 	sts	0x0100, r24
			break;
  da:	08 95       	ret
		case CNT_inc:
			CNT_State = CNT_wait;
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	80 93 00 01 	sts	0x0100, r24
			break;
  e2:	08 95       	ret
		case CNT_dec:
			CNT_State = CNT_wait;
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	80 93 00 01 	sts	0x0100, r24
			break;
  ea:	08 95       	ret
		case CNT_wait:
			if(getBit(PINA,0)&&getBit(PINA,1)){
  ec:	00 9b       	sbis	0x00, 0	; 0
  ee:	05 c0       	rjmp	.+10     	; 0xfa <counter+0x4c>
  f0:	01 9b       	sbis	0x00, 1	; 0
  f2:	03 c0       	rjmp	.+6      	; 0xfa <counter+0x4c>
				CNT_State = CNT_rst;
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	80 93 00 01 	sts	0x0100, r24
			}
			if(getBit(PINA,0)&&!getBit(PINA,1)){
  fa:	00 9b       	sbis	0x00, 0	; 0
  fc:	08 c0       	rjmp	.+16     	; 0x10e <counter+0x60>
  fe:	01 99       	sbic	0x00, 1	; 0
 100:	06 c0       	rjmp	.+12     	; 0x10e <counter+0x60>
				CNT_State = CNT_inc;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 00 01 	sts	0x0100, r24
			}
			if(!getBit(PINA,0)&&getBit(PINA,1)){
 108:	00 9b       	sbis	0x00, 0	; 0
 10a:	25 c0       	rjmp	.+74     	; 0x156 <counter+0xa8>
 10c:	14 c0       	rjmp	.+40     	; 0x136 <counter+0x88>
 10e:	00 99       	sbic	0x00, 0	; 0
 110:	06 c0       	rjmp	.+12     	; 0x11e <counter+0x70>
 112:	01 9b       	sbis	0x00, 1	; 0
 114:	04 c0       	rjmp	.+8      	; 0x11e <counter+0x70>
				CNT_State = CNT_dec;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	80 93 00 01 	sts	0x0100, r24
 11c:	14 c0       	rjmp	.+40     	; 0x146 <counter+0x98>
			}
			break;
	}
	switch(CNT_State){
 11e:	80 91 00 01 	lds	r24, 0x0100
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	81 f0       	breq	.+32     	; 0x146 <counter+0x98>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	19 f0       	breq	.+6      	; 0x130 <counter+0x82>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	21 f0       	breq	.+8      	; 0x136 <counter+0x88>
 12e:	08 95       	ret
		case CNT_wait:
			break;
		case CNT_rst:
			tempC = 0x00;
 130:	10 92 01 01 	sts	0x0101, r1
			break;
 134:	08 95       	ret
		case CNT_inc:
			if(tempC<9){
 136:	80 91 01 01 	lds	r24, 0x0101
 13a:	89 30       	cpi	r24, 0x09	; 9
 13c:	78 f4       	brcc	.+30     	; 0x15c <counter+0xae>
				tempC++;
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 01 01 	sts	0x0101, r24
 144:	08 95       	ret
			}
			break;
		case CNT_dec:
			if(tempC>0){
 146:	80 91 01 01 	lds	r24, 0x0101
 14a:	88 23       	and	r24, r24
 14c:	39 f0       	breq	.+14     	; 0x15c <counter+0xae>
				tempC--;
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	80 93 01 01 	sts	0x0101, r24
 154:	08 95       	ret
				CNT_State = CNT_rst;
			}
			if(getBit(PINA,0)&&!getBit(PINA,1)){
				CNT_State = CNT_inc;
			}
			if(!getBit(PINA,0)&&getBit(PINA,1)){
 156:	01 99       	sbic	0x00, 1	; 0
 158:	de cf       	rjmp	.-68     	; 0x116 <counter+0x68>
 15a:	ed cf       	rjmp	.-38     	; 0x136 <counter+0x88>
 15c:	08 95       	ret

0000015e <main>:
}

int main(void)
{
	//Initialize
	DDRA = 0x00; //Configure port A as inputs
 15e:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xFF; //Configure port C as outputs
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	87 b9       	out	0x07, r24	; 7
	PORTA = 0xFF;
 164:	82 b9       	out	0x02, r24	; 2
	PORTC = 0x00;
 166:	18 b8       	out	0x08, r1	; 8
	CNT_State = CNT_init;
 168:	10 92 00 01 	sts	0x0100, r1
	tempC = 0x00; 
 16c:	10 92 01 01 	sts	0x0101, r1

	//Loop
	while (1){
		counter();
 170:	9e df       	rcall	.-196    	; 0xae <counter>
		PORTC = tempC;
 172:	80 91 01 01 	lds	r24, 0x0101
 176:	88 b9       	out	0x08, r24	; 8
    }
 178:	fb cf       	rjmp	.-10     	; 0x170 <main+0x12>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
