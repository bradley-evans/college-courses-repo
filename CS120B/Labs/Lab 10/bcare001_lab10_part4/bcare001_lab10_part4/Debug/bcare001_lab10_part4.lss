
bcare001_lab10_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000003ba  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800116  00800116  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000059f  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000021b  00000000  00000000  00000b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004dd  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000285  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000323  00000000  00000000  000015f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	30 c1       	rjmp	.+608    	; 0x296 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4a d1       	rcall	.+660    	; 0x358 <main>
  c4:	78 c1       	rjmp	.+752    	; 0x3b6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	29 f4       	brne	.+10     	; 0xec <delay_ms+0x24>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	77 e0       	ldi	r23, 0x07	; 7
  ea:	63 e0       	ldi	r22, 0x03	; 3
  ec:	27 2f       	mov	r18, r23
  ee:	36 2f       	mov	r19, r22
  f0:	ef cf       	rjmp	.-34     	; 0xd0 <delay_ms+0x8>

000000f2 <LCD_WriteCommand>:
  f2:	5e 98       	cbi	0x0b, 6	; 11
  f4:	82 b9       	out	0x02, r24	; 2
  f6:	5f 9a       	sbi	0x0b, 7	; 11
  f8:	00 00       	nop
  fa:	5f 98       	cbi	0x0b, 7	; 11
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	e3 cf       	rjmp	.-58     	; 0xc8 <delay_ms>
 102:	08 95       	ret

00000104 <LCD_ClearScreen>:
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <LCD_WriteCommand>
 108:	08 95       	ret

0000010a <LCD_Cursor>:
 10a:	81 31       	cpi	r24, 0x11	; 17
 10c:	18 f4       	brcc	.+6      	; 0x114 <LCD_Cursor+0xa>
 10e:	81 58       	subi	r24, 0x81	; 129
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <LCD_WriteCommand>
 112:	08 95       	ret
 114:	81 55       	subi	r24, 0x51	; 81
 116:	ed cf       	rjmp	.-38     	; 0xf2 <LCD_WriteCommand>
 118:	08 95       	ret

0000011a <LCD_init>:
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	d4 df       	rcall	.-88     	; 0xc8 <delay_ms>
 120:	88 e3       	ldi	r24, 0x38	; 56
 122:	e7 df       	rcall	.-50     	; 0xf2 <LCD_WriteCommand>
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	e5 df       	rcall	.-54     	; 0xf2 <LCD_WriteCommand>
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	e3 df       	rcall	.-58     	; 0xf2 <LCD_WriteCommand>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	e1 df       	rcall	.-62     	; 0xf2 <LCD_WriteCommand>
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	c9 cf       	rjmp	.-110    	; 0xc8 <delay_ms>
 136:	08 95       	ret

00000138 <LCD_WriteData>:
 138:	5e 9a       	sbi	0x0b, 6	; 11
 13a:	82 b9       	out	0x02, r24	; 2
 13c:	5f 9a       	sbi	0x0b, 7	; 11
 13e:	00 00       	nop
 140:	5f 98       	cbi	0x0b, 7	; 11
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	c0 cf       	rjmp	.-128    	; 0xc8 <delay_ms>
 148:	08 95       	ret

0000014a <LCD_DisplayString>:
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	18 2f       	mov	r17, r24
 154:	eb 01       	movw	r28, r22
 156:	d6 df       	rcall	.-84     	; 0x104 <LCD_ClearScreen>
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	51 f0       	breq	.+20     	; 0x172 <LCD_DisplayString+0x28>
 15e:	01 e0       	ldi	r16, 0x01	; 1
 160:	01 0f       	add	r16, r17
 162:	81 2f       	mov	r24, r17
 164:	d2 df       	rcall	.-92     	; 0x10a <LCD_Cursor>
 166:	89 91       	ld	r24, Y+
 168:	e7 df       	rcall	.-50     	; 0x138 <LCD_WriteData>
 16a:	10 2f       	mov	r17, r16
 16c:	88 81       	ld	r24, Y
 16e:	81 11       	cpse	r24, r1
 170:	f6 cf       	rjmp	.-20     	; 0x15e <LCD_DisplayString+0x14>
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <GetKeypadKey>:
 17c:	8f ee       	ldi	r24, 0xEF	; 239
 17e:	88 b9       	out	0x08, r24	; 8
 180:	00 00       	nop
 182:	30 9b       	sbis	0x06, 0	; 6
 184:	44 c0       	rjmp	.+136    	; 0x20e <GetKeypadKey+0x92>
 186:	86 b1       	in	r24, 0x06	; 6
 188:	80 95       	com	r24
 18a:	81 fd       	sbrc	r24, 1
 18c:	42 c0       	rjmp	.+132    	; 0x212 <GetKeypadKey+0x96>
 18e:	86 b1       	in	r24, 0x06	; 6
 190:	80 95       	com	r24
 192:	82 fd       	sbrc	r24, 2
 194:	40 c0       	rjmp	.+128    	; 0x216 <GetKeypadKey+0x9a>
 196:	86 b1       	in	r24, 0x06	; 6
 198:	80 95       	com	r24
 19a:	83 fd       	sbrc	r24, 3
 19c:	3e c0       	rjmp	.+124    	; 0x21a <GetKeypadKey+0x9e>
 19e:	8f ed       	ldi	r24, 0xDF	; 223
 1a0:	88 b9       	out	0x08, r24	; 8
 1a2:	00 00       	nop
 1a4:	30 9b       	sbis	0x06, 0	; 6
 1a6:	3b c0       	rjmp	.+118    	; 0x21e <GetKeypadKey+0xa2>
 1a8:	86 b1       	in	r24, 0x06	; 6
 1aa:	80 95       	com	r24
 1ac:	81 fd       	sbrc	r24, 1
 1ae:	39 c0       	rjmp	.+114    	; 0x222 <GetKeypadKey+0xa6>
 1b0:	86 b1       	in	r24, 0x06	; 6
 1b2:	80 95       	com	r24
 1b4:	82 fd       	sbrc	r24, 2
 1b6:	37 c0       	rjmp	.+110    	; 0x226 <GetKeypadKey+0xaa>
 1b8:	86 b1       	in	r24, 0x06	; 6
 1ba:	80 95       	com	r24
 1bc:	83 fd       	sbrc	r24, 3
 1be:	35 c0       	rjmp	.+106    	; 0x22a <GetKeypadKey+0xae>
 1c0:	8f eb       	ldi	r24, 0xBF	; 191
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	00 00       	nop
 1c6:	30 9b       	sbis	0x06, 0	; 6
 1c8:	32 c0       	rjmp	.+100    	; 0x22e <GetKeypadKey+0xb2>
 1ca:	86 b1       	in	r24, 0x06	; 6
 1cc:	80 95       	com	r24
 1ce:	81 fd       	sbrc	r24, 1
 1d0:	30 c0       	rjmp	.+96     	; 0x232 <GetKeypadKey+0xb6>
 1d2:	86 b1       	in	r24, 0x06	; 6
 1d4:	80 95       	com	r24
 1d6:	82 fd       	sbrc	r24, 2
 1d8:	2e c0       	rjmp	.+92     	; 0x236 <GetKeypadKey+0xba>
 1da:	86 b1       	in	r24, 0x06	; 6
 1dc:	80 95       	com	r24
 1de:	83 fd       	sbrc	r24, 3
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <GetKeypadKey+0xbe>
 1e2:	8f e7       	ldi	r24, 0x7F	; 127
 1e4:	88 b9       	out	0x08, r24	; 8
 1e6:	00 00       	nop
 1e8:	96 b1       	in	r25, 0x06	; 6
 1ea:	90 95       	com	r25
 1ec:	89 2f       	mov	r24, r25
 1ee:	81 70       	andi	r24, 0x01	; 1
 1f0:	90 fd       	sbrc	r25, 0
 1f2:	25 c0       	rjmp	.+74     	; 0x23e <GetKeypadKey+0xc2>
 1f4:	96 b1       	in	r25, 0x06	; 6
 1f6:	90 95       	com	r25
 1f8:	91 fd       	sbrc	r25, 1
 1fa:	23 c0       	rjmp	.+70     	; 0x242 <GetKeypadKey+0xc6>
 1fc:	96 b1       	in	r25, 0x06	; 6
 1fe:	90 95       	com	r25
 200:	92 fd       	sbrc	r25, 2
 202:	21 c0       	rjmp	.+66     	; 0x246 <GetKeypadKey+0xca>
 204:	96 b1       	in	r25, 0x06	; 6
 206:	90 95       	com	r25
 208:	93 fd       	sbrc	r25, 3
 20a:	1f c0       	rjmp	.+62     	; 0x24a <GetKeypadKey+0xce>
 20c:	08 95       	ret
 20e:	81 e3       	ldi	r24, 0x31	; 49
 210:	08 95       	ret
 212:	84 e3       	ldi	r24, 0x34	; 52
 214:	08 95       	ret
 216:	87 e3       	ldi	r24, 0x37	; 55
 218:	08 95       	ret
 21a:	8a e2       	ldi	r24, 0x2A	; 42
 21c:	08 95       	ret
 21e:	82 e3       	ldi	r24, 0x32	; 50
 220:	08 95       	ret
 222:	85 e3       	ldi	r24, 0x35	; 53
 224:	08 95       	ret
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	08 95       	ret
 22a:	80 e3       	ldi	r24, 0x30	; 48
 22c:	08 95       	ret
 22e:	83 e3       	ldi	r24, 0x33	; 51
 230:	08 95       	ret
 232:	86 e3       	ldi	r24, 0x36	; 54
 234:	08 95       	ret
 236:	89 e3       	ldi	r24, 0x39	; 57
 238:	08 95       	ret
 23a:	83 e2       	ldi	r24, 0x23	; 35
 23c:	08 95       	ret
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	08 95       	ret
 242:	82 e4       	ldi	r24, 0x42	; 66
 244:	08 95       	ret
 246:	83 e4       	ldi	r24, 0x43	; 67
 248:	08 95       	ret
 24a:	84 e4       	ldi	r24, 0x44	; 68
 24c:	08 95       	ret

0000024e <TimerOn>:
 24e:	8b e0       	ldi	r24, 0x0B	; 11
 250:	80 93 81 00 	sts	0x0081, r24
 254:	8d e7       	ldi	r24, 0x7D	; 125
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 89 00 	sts	0x0089, r25
 25c:	80 93 88 00 	sts	0x0088, r24
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	80 93 6f 00 	sts	0x006F, r24
 266:	10 92 85 00 	sts	0x0085, r1
 26a:	10 92 84 00 	sts	0x0084, r1
 26e:	80 91 00 01 	lds	r24, 0x0100
 272:	90 91 01 01 	lds	r25, 0x0101
 276:	a0 91 02 01 	lds	r26, 0x0102
 27a:	b0 91 03 01 	lds	r27, 0x0103
 27e:	80 93 17 01 	sts	0x0117, r24
 282:	90 93 18 01 	sts	0x0118, r25
 286:	a0 93 19 01 	sts	0x0119, r26
 28a:	b0 93 1a 01 	sts	0x011A, r27
 28e:	8f b7       	in	r24, 0x3f	; 63
 290:	80 68       	ori	r24, 0x80	; 128
 292:	8f bf       	out	0x3f, r24	; 63
 294:	08 95       	ret

00000296 <__vector_13>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	80 91 17 01 	lds	r24, 0x0117
 2ac:	90 91 18 01 	lds	r25, 0x0118
 2b0:	a0 91 19 01 	lds	r26, 0x0119
 2b4:	b0 91 1a 01 	lds	r27, 0x011A
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	a1 09       	sbc	r26, r1
 2bc:	b1 09       	sbc	r27, r1
 2be:	80 93 17 01 	sts	0x0117, r24
 2c2:	90 93 18 01 	sts	0x0118, r25
 2c6:	a0 93 19 01 	sts	0x0119, r26
 2ca:	b0 93 1a 01 	sts	0x011A, r27
 2ce:	89 2b       	or	r24, r25
 2d0:	8a 2b       	or	r24, r26
 2d2:	8b 2b       	or	r24, r27
 2d4:	99 f4       	brne	.+38     	; 0x2fc <__vector_13+0x66>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 1b 01 	sts	0x011B, r24
 2dc:	80 91 00 01 	lds	r24, 0x0100
 2e0:	90 91 01 01 	lds	r25, 0x0101
 2e4:	a0 91 02 01 	lds	r26, 0x0102
 2e8:	b0 91 03 01 	lds	r27, 0x0103
 2ec:	80 93 17 01 	sts	0x0117, r24
 2f0:	90 93 18 01 	sts	0x0118, r25
 2f4:	a0 93 19 01 	sts	0x0119, r26
 2f8:	b0 93 1a 01 	sts	0x011A, r27
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <Tick>:
}

enum states{start, display} state;
void Tick() {
 30e:	cf 93       	push	r28
	unsigned char key;
	static unsigned char cursor = 0;
	// transitions'
	switch(state) {
 310:	80 91 1c 01 	lds	r24, 0x011C
 314:	88 23       	and	r24, r24
 316:	19 f0       	breq	.+6      	; 0x31e <Tick+0x10>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	c1 f0       	breq	.+48     	; 0x34c <Tick+0x3e>
 31c:	06 c0       	rjmp	.+12     	; 0x32a <Tick+0x1c>
		case start:
			LCD_Cursor(0);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	f4 de       	rcall	.-536    	; 0x10a <LCD_Cursor>
			state = display; break;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 1c 01 	sts	0x011C, r24
 328:	11 c0       	rjmp	.+34     	; 0x34c <Tick+0x3e>
		case display:
			state = display; break;
		default:
			state = start;
 32a:	10 92 1c 01 	sts	0x011C, r1
 32e:	12 c0       	rjmp	.+36     	; 0x354 <Tick+0x46>
		case start:
		break;
		case display:
		key = GetKeypadKey();
		if(key!='\0'){
			cursor = (cursor==16 ? 0 : cursor);
 330:	80 91 16 01 	lds	r24, 0x0116
 334:	80 31       	cpi	r24, 0x10	; 16
 336:	09 f4       	brne	.+2      	; 0x33a <Tick+0x2c>
 338:	80 e0       	ldi	r24, 0x00	; 0
			LCD_Cursor(++cursor);
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 16 01 	sts	0x0116, r24
 340:	e4 de       	rcall	.-568    	; 0x10a <LCD_Cursor>
			LCD_WriteData(key);
 342:	8c 2f       	mov	r24, r28
 344:	f9 de       	rcall	.-526    	; 0x138 <LCD_WriteData>
			LCD_Cursor(0);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	e0 de       	rcall	.-576    	; 0x10a <LCD_Cursor>
 34a:	04 c0       	rjmp	.+8      	; 0x354 <Tick+0x46>
	// state actions
	switch(state) {
		case start:
		break;
		case display:
		key = GetKeypadKey();
 34c:	17 df       	rcall	.-466    	; 0x17c <GetKeypadKey>
 34e:	c8 2f       	mov	r28, r24
		if(key!='\0'){
 350:	81 11       	cpse	r24, r1
 352:	ee cf       	rjmp	.-36     	; 0x330 <Tick+0x22>
			LCD_WriteData(key);
			LCD_Cursor(0);
		}
		break;
	}
}
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <main>:

int main(void) {
	DDRB = 0xFF; PORTB = 0x00;
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	84 b9       	out	0x04, r24	; 4
 35c:	15 b8       	out	0x05, r1	; 5
	DDRA = 0xFF; PORTA = 0x00;
 35e:	81 b9       	out	0x01, r24	; 1
 360:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00;
 362:	8a b9       	out	0x0a, r24	; 10
 364:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 366:	80 ef       	ldi	r24, 0xF0	; 240
 368:	87 b9       	out	0x07, r24	; 7
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	88 b9       	out	0x08, r24	; 8
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 36e:	88 ec       	ldi	r24, 0xC8	; 200
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	a0 e0       	ldi	r26, 0x00	; 0
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	80 93 00 01 	sts	0x0100, r24
 37a:	90 93 01 01 	sts	0x0101, r25
 37e:	a0 93 02 01 	sts	0x0102, r26
 382:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 386:	80 93 17 01 	sts	0x0117, r24
 38a:	90 93 18 01 	sts	0x0118, r25
 38e:	a0 93 19 01 	sts	0x0119, r26
 392:	b0 93 1a 01 	sts	0x011A, r27
	DDRA = 0xFF; PORTA = 0x00;
	DDRD = 0xFF; PORTD = 0x00;
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
	
	TimerSet(200);
	TimerOn();
 396:	5b df       	rcall	.-330    	; 0x24e <TimerOn>
	LCD_init();
 398:	c0 de       	rcall	.-640    	; 0x11a <LCD_init>
	LCD_DisplayString(1,"Congratulations!");
 39a:	64 e0       	ldi	r22, 0x04	; 4
 39c:	71 e0       	ldi	r23, 0x01	; 1
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	d4 de       	rcall	.-600    	; 0x14a <LCD_DisplayString>
	state = start;
 3a2:	10 92 1c 01 	sts	0x011C, r1
	while(1) {
		while (!TimerFlag);
 3a6:	80 91 1b 01 	lds	r24, 0x011B
 3aa:	88 23       	and	r24, r24
 3ac:	e1 f3       	breq	.-8      	; 0x3a6 <main+0x4e>
		TimerFlag = 0;
 3ae:	10 92 1b 01 	sts	0x011B, r1
		Tick();
 3b2:	ad df       	rcall	.-166    	; 0x30e <Tick>
	}
 3b4:	f8 cf       	rjmp	.-16     	; 0x3a6 <main+0x4e>

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
