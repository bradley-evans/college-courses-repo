
bcare001_lab1_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000097  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000062  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000a1  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000151  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  0000047d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; //Configure port A as inputs
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF; //Configure port B as output
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	PORTA = 0xFF; //Initialize outputs to 0
  72:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x00; //Initialize inputs to 0
  74:	18 ba       	out	0x18, r1	; 24
	unsigned char temp = 0x00;
	
    while (1){
		//If PA0==1 then PA1==1
		if(PINA == 0x01){
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	99 b3       	in	r25, 0x19	; 25
  7c:	82 2f       	mov	r24, r18
  7e:	91 30       	cpi	r25, 0x01	; 1
  80:	09 f0       	breq	.+2      	; 0x84 <main+0x18>
  82:	83 2f       	mov	r24, r19
			temp =  0x01;
		//If PA0==0 then PA0==0
		}else{
			temp = 0x00;	
		}
		PORTB = temp;
  84:	88 bb       	out	0x18, r24	; 24
    }
  86:	f9 cf       	rjmp	.-14     	; 0x7a <main+0xe>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
