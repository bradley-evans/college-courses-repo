
bcare001_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a1  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006b  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000b2  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000155  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000004b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; //Configure port A as inputs
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0xFF; //Configure port C as output
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	PORTA = 0xFF; //Initialize outputs to 0
  72:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0x00; //Initialize inputs to 0
  74:	15 ba       	out	0x15, r1	; 21
	
    while (1){
		unsigned char cntavail = 0x04;
  76:	34 e0       	ldi	r19, 0x04	; 4
		//If PA0==1 then PA1==1
		if(PINA & 0x01){
			cntavail--;
  78:	23 e0       	ldi	r18, 0x03	; 3
		//If PA0==1 then PA1==1
		if(PINA & 0x08){
			cntavail--;
		}
		if(cntavail==0x00){
			cntavail = 128;
  7a:	90 e8       	ldi	r25, 0x80	; 128
	PORTC = 0x00; //Initialize inputs to 0
	
    while (1){
		unsigned char cntavail = 0x04;
		//If PA0==1 then PA1==1
		if(PINA & 0x01){
  7c:	c8 9b       	sbis	0x19, 0	; 25
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
			cntavail--;
  80:	82 2f       	mov	r24, r18
  82:	01 c0       	rjmp	.+2      	; 0x86 <main+0x1a>
	DDRC = 0xFF; //Configure port C as output
	PORTA = 0xFF; //Initialize outputs to 0
	PORTC = 0x00; //Initialize inputs to 0
	
    while (1){
		unsigned char cntavail = 0x04;
  84:	83 2f       	mov	r24, r19
		//If PA0==1 then PA1==1
		if(PINA & 0x01){
			cntavail--;
		}
		//If PA0==1 then PA1==1
		if(PINA & 0x02){
  86:	c9 99       	sbic	0x19, 1	; 25
			cntavail--;
  88:	81 50       	subi	r24, 0x01	; 1
		}
		//If PA0==1 then PA1==1
		if(PINA & 0x04){
  8a:	ca 99       	sbic	0x19, 2	; 25
			cntavail--;
  8c:	81 50       	subi	r24, 0x01	; 1
		}
		//If PA0==1 then PA1==1
		if(PINA & 0x08){
  8e:	cb 99       	sbic	0x19, 3	; 25
			cntavail--;
  90:	81 50       	subi	r24, 0x01	; 1
		}
		if(cntavail==0x00){
  92:	81 11       	cpse	r24, r1
  94:	01 c0       	rjmp	.+2      	; 0x98 <main+0x2c>
			cntavail = 128;
  96:	89 2f       	mov	r24, r25
		}
		PORTC = cntavail;
  98:	85 bb       	out	0x15, r24	; 21
    }
  9a:	f0 cf       	rjmp	.-32     	; 0x7c <main+0x10>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
