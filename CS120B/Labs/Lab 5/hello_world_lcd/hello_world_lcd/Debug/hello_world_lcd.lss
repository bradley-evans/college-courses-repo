
hello_world_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000303  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f3  00000000  00000000  000005c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021d  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d6  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021a  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	5c d0       	rcall	.+184    	; 0x16c <main>
  b4:	66 c0       	rjmp	.+204    	; 0x182 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	5c f0       	brlt	.+22     	; 0xd4 <delay_ms+0x1c>
  be:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  c0:	00 00       	nop
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  c6:	e1 f7       	brne	.-8      	; 0xc0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	5f 4f       	sbci	r21, 0xFF	; 255
  cc:	48 17       	cp	r20, r24
  ce:	59 07       	cpc	r21, r25
  d0:	29 f4       	brne	.+10     	; 0xdc <delay_ms+0x24>
  d2:	08 95       	ret
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  d8:	77 e0       	ldi	r23, 0x07	; 7
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	27 2f       	mov	r18, r23
  de:	36 2f       	mov	r19, r22
  e0:	ef cf       	rjmp	.-34     	; 0xc0 <delay_ms+0x8>

000000e2 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
  e2:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
  e4:	82 b9       	out	0x02, r24	; 2
   SET_BIT(CONTROL_BUS,E);
  e6:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  e8:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  ea:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	e3 cf       	rjmp	.-58     	; 0xb8 <delay_ms>
  f2:	08 95       	ret

000000f4 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	f5 cf       	rjmp	.-22     	; 0xe2 <LCD_WriteCommand>
  f8:	08 95       	ret

000000fa <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
  fa:	81 31       	cpi	r24, 0x11	; 17
  fc:	18 f4       	brcc	.+6      	; 0x104 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
  fe:	81 58       	subi	r24, 0x81	; 129
 100:	f0 cf       	rjmp	.-32     	; 0xe2 <LCD_WriteCommand>
 102:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 104:	81 55       	subi	r24, 0x51	; 81
 106:	ed cf       	rjmp	.-38     	; 0xe2 <LCD_WriteCommand>
 108:	08 95       	ret

0000010a <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	d4 df       	rcall	.-88     	; 0xb8 <delay_ms>
	LCD_WriteCommand(0x38);
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	e7 df       	rcall	.-50     	; 0xe2 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	e5 df       	rcall	.-54     	; 0xe2 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	e3 df       	rcall	.-58     	; 0xe2 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	e1 df       	rcall	.-62     	; 0xe2 <LCD_WriteCommand>
	delay_ms(10);						 
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	c9 cf       	rjmp	.-110    	; 0xb8 <delay_ms>
 126:	08 95       	ret

00000128 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 128:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
 12a:	82 b9       	out	0x02, r24	; 2
   SET_BIT(CONTROL_BUS,E);
 12c:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 12e:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 130:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	c0 cf       	rjmp	.-128    	; 0xb8 <delay_ms>
 138:	08 95       	ret

0000013a <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	18 2f       	mov	r17, r24
 144:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 146:	d6 df       	rcall	.-84     	; 0xf4 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 148:	88 81       	ld	r24, Y
 14a:	88 23       	and	r24, r24
 14c:	51 f0       	breq	.+20     	; 0x162 <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 14e:	01 e0       	ldi	r16, 0x01	; 1
 150:	01 0f       	add	r16, r17
 152:	81 2f       	mov	r24, r17
 154:	d2 df       	rcall	.-92     	; 0xfa <LCD_Cursor>
      LCD_WriteData(*string++);
 156:	89 91       	ld	r24, Y+
 158:	e7 df       	rcall	.-50     	; 0x128 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 15a:	10 2f       	mov	r17, r16
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 15c:	88 81       	ld	r24, Y
 15e:	81 11       	cpse	r24, r1
 160:	f6 cf       	rjmp	.-20     	; 0x14e <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <main>:
#include <avr/io.h>
#include "io.c"
int main(void)
{
	DDRA = 0xFF; PORTA = 0x00; // LCD data lines
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	81 b9       	out	0x01, r24	; 1
 170:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 172:	8a b9       	out	0x0a, r24	; 10
 174:	1b b8       	out	0x0b, r1	; 11
	// Initializes the LCD display
	LCD_init();
 176:	c9 df       	rcall	.-110    	; 0x10a <LCD_init>
	// Starting at position 1 on the LCD screen, writes Hello World
	LCD_DisplayString(1, " ");
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	71 e0       	ldi	r23, 0x01	; 1
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	dd df       	rcall	.-70     	; 0x13a <LCD_DisplayString>
	while(1) {continue;}
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x14>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
