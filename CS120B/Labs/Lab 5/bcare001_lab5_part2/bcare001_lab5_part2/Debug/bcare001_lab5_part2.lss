
bcare001_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000029a  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000235  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000168  00000000  00000000  00000629  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000274  00000000  00000000  00000791  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f7  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000097  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c3 d0       	rcall	.+390    	; 0x24a <main>
  c4:	e8 c0       	rjmp	.+464    	; 0x296 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 04 01 	sts	0x0104, r24
  fc:	90 93 05 01 	sts	0x0105, r25
 100:	a0 93 06 01 	sts	0x0106, r26
 104:	b0 93 07 01 	sts	0x0107, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 04 01 	lds	r24, 0x0104
 126:	90 91 05 01 	lds	r25, 0x0105
 12a:	a0 91 06 01 	lds	r26, 0x0106
 12e:	b0 91 07 01 	lds	r27, 0x0107
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 04 01 	sts	0x0104, r24
 13c:	90 93 05 01 	sts	0x0105, r25
 140:	a0 93 06 01 	sts	0x0106, r26
 144:	b0 93 07 01 	sts	0x0107, r27
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 08 01 	sts	0x0108, r24
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	90 91 01 01 	lds	r25, 0x0101
 15e:	a0 91 02 01 	lds	r26, 0x0102
 162:	b0 91 03 01 	lds	r27, 0x0103
 166:	80 93 04 01 	sts	0x0104, r24
 16a:	90 93 05 01 	sts	0x0105, r25
 16e:	a0 93 06 01 	sts	0x0106, r26
 172:	b0 93 07 01 	sts	0x0107, r27
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <led>:
enum LED_States {init, start, blink, pause, reset} led_state;
unsigned char tempB;
unsigned char counter;

void led(){
	unsigned char a = (~PINA & 0x01);
 188:	80 b1       	in	r24, 0x00	; 0
 18a:	80 95       	com	r24
 18c:	81 70       	andi	r24, 0x01	; 1
	switch(led_state){
 18e:	90 91 0a 01 	lds	r25, 0x010A
 192:	92 30       	cpi	r25, 0x02	; 2
 194:	c9 f0       	breq	.+50     	; 0x1c8 <led+0x40>
 196:	28 f4       	brcc	.+10     	; 0x1a2 <led+0x1a>
 198:	99 23       	and	r25, r25
 19a:	51 f0       	breq	.+20     	; 0x1b0 <led+0x28>
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	71 f0       	breq	.+28     	; 0x1bc <led+0x34>
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <led+0xb4>
 1a2:	93 30       	cpi	r25, 0x03	; 3
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <led+0x20>
 1a6:	40 c0       	rjmp	.+128    	; 0x228 <led+0xa0>
 1a8:	94 30       	cpi	r25, 0x04	; 4
 1aa:	09 f4       	brne	.+2      	; 0x1ae <led+0x26>
 1ac:	43 c0       	rjmp	.+134    	; 0x234 <led+0xac>
 1ae:	46 c0       	rjmp	.+140    	; 0x23c <led+0xb4>
		case init:
			counter = 0;
 1b0:	10 92 0b 01 	sts	0x010B, r1
			led_state = start;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 0a 01 	sts	0x010A, r24
 1ba:	44 c0       	rjmp	.+136    	; 0x244 <led+0xbc>
			break;
		case start:
			led_state = a ? start : blink;
 1bc:	81 11       	cpse	r24, r1
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <led+0x3a>
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	90 93 0a 01 	sts	0x010A, r25
			break;
 1c6:	3a c0       	rjmp	.+116    	; 0x23c <led+0xb4>
		case blink:
			if(!a && counter > 20) {
 1c8:	81 11       	cpse	r24, r1
 1ca:	2a c0       	rjmp	.+84     	; 0x220 <led+0x98>
 1cc:	80 91 0b 01 	lds	r24, 0x010B
 1d0:	85 31       	cpi	r24, 0x15	; 21
 1d2:	f8 f0       	brcs	.+62     	; 0x212 <led+0x8a>
				led_state = blink;
				if(tempB == 0x00){
 1d4:	80 91 09 01 	lds	r24, 0x0109
 1d8:	81 11       	cpse	r24, r1
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <led+0x5c>
					tempB = 0x01;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 09 01 	sts	0x0109, r24
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <led+0x7e>
				}else if(tempB == 0x01){
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <led+0x68>
					tempB = 0x02;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 09 01 	sts	0x0109, r24
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <led+0x7e>
	            }else if(tempB == 0x02){
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	21 f4       	brne	.+8      	; 0x1fc <led+0x74>
					tempB = 0x04;
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	80 93 09 01 	sts	0x0109, r24
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <led+0x7e>
	            }else if(tempB == 0x04){
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	19 f4       	brne	.+6      	; 0x206 <led+0x7e>
					tempB = 0x01;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 09 01 	sts	0x0109, r24
				}
				counter = 0;
 206:	10 92 0b 01 	sts	0x010B, r1
				PORTB = tempB;
 20a:	80 91 09 01 	lds	r24, 0x0109
 20e:	85 b9       	out	0x05, r24	; 5
 210:	15 c0       	rjmp	.+42     	; 0x23c <led+0xb4>
			}else if(!a && counter <= 20){
				counter++;
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 0b 01 	sts	0x010B, r24
				led_state = blink;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 0a 01 	sts	0x010A, r24
 21e:	08 95       	ret
			}else{
				led_state = pause;
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	80 93 0a 01 	sts	0x010A, r24
 226:	08 95       	ret
			}
			break;
		case pause:
			led_state = a ? pause : reset;
 228:	81 11       	cpse	r24, r1
 22a:	01 c0       	rjmp	.+2      	; 0x22e <led+0xa6>
 22c:	94 e0       	ldi	r25, 0x04	; 4
 22e:	90 93 0a 01 	sts	0x010A, r25
			break;
 232:	04 c0       	rjmp	.+8      	; 0x23c <led+0xb4>
		case reset:
			led_state = a ? start : reset;
 234:	81 11       	cpse	r24, r1
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	90 93 0a 01 	sts	0x010A, r25
			break;
		default:
			break;
	}
	switch(led_state){
 23c:	80 91 0a 01 	lds	r24, 0x010A
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	11 f4       	brne	.+4      	; 0x248 <led+0xc0>
		case init:
			break;
		case start:
			tempB = 0x00;
 244:	10 92 09 01 	sts	0x0109, r1
 248:	08 95       	ret

0000024a <main>:
			break;
	}
}

int main(){
	DDRB = 0xFF; PORTB = 0x00;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	84 b9       	out	0x04, r24	; 4
 24e:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 250:	11 b8       	out	0x01, r1	; 1
 252:	82 b9       	out	0x02, r24	; 2
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 254:	82 e3       	ldi	r24, 0x32	; 50
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	a0 e0       	ldi	r26, 0x00	; 0
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	80 93 00 01 	sts	0x0100, r24
 260:	90 93 01 01 	sts	0x0101, r25
 264:	a0 93 02 01 	sts	0x0102, r26
 268:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 26c:	80 93 04 01 	sts	0x0104, r24
 270:	90 93 05 01 	sts	0x0105, r25
 274:	a0 93 06 01 	sts	0x0106, r26
 278:	b0 93 07 01 	sts	0x0107, r27

int main(){
	DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0x00; PORTA = 0xFF;
	TimerSet(50);
	TimerOn();
 27c:	25 df       	rcall	.-438    	; 0xc8 <TimerOn>
	
	tempB = 0x00;
 27e:	10 92 09 01 	sts	0x0109, r1
	led_state = init;
 282:	10 92 0a 01 	sts	0x010A, r1
	while(1) {
		while (!TimerFlag);
 286:	80 91 08 01 	lds	r24, 0x0108
 28a:	88 23       	and	r24, r24
 28c:	e1 f3       	breq	.-8      	; 0x286 <main+0x3c>
			TimerFlag = 0;
 28e:	10 92 08 01 	sts	0x0108, r1
		led();
 292:	7a df       	rcall	.-268    	; 0x188 <led>
	}
 294:	f8 cf       	rjmp	.-16     	; 0x286 <main+0x3c>

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
