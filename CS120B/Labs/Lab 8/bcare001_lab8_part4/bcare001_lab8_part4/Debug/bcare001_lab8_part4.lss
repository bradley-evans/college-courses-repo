
bcare001_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000012e  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c2  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012f  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a6  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000075  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
   6:	00 00       	nop
   8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
   e:	00 00       	nop
  10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
  16:	00 00       	nop
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
  22:	00 00       	nop
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
  26:	00 00       	nop
  28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
  36:	00 00       	nop
  38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
  42:	00 00       	nop
  44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
  62:	00 00       	nop
  64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
  66:	00 00       	nop
  68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
  72:	00 00       	nop
  74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
  76:	00 00       	nop
  78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
  82:	00 00       	nop
  84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
  86:	00 00       	nop
  88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	92 00       	.word	0x0092	; ????
  8e:	90 00       	.word	0x0090	; ????
  90:	8e 00       	.word	0x008e	; ????
  92:	8c 00       	.word	0x008c	; ????
  94:	8a 00       	.word	0x008a	; ????
  96:	88 00       	.word	0x0088	; ????
  98:	86 00       	.word	0x0086	; ????
  9a:	84 00       	.word	0x0084	; ????
  9c:	82 00       	.word	0x0082	; ????

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ea e6       	ldi	r30, 0x6A	; 106
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>
  c4:	32 d0       	rcall	.+100    	; 0x12a <main>
  c6:	4f c0       	rjmp	.+158    	; 0x166 <_exit>

000000c8 <__bad_interrupt>:
  c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ADC_init>:
 */ 

#include <avr/io.h>

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 6e       	ori	r24, 0xE0	; 224
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <lightlevel>:
}

const unsigned short MAX_LIGHT = 0x0180;

void lightlevel(){
	unsigned short current_ADC = ADC;
  d6:	20 91 78 00 	lds	r18, 0x0078
  da:	30 91 79 00 	lds	r19, 0x0079
	unsigned char leds = current_ADC/(MAX_LIGHT>>3);
  de:	ab ea       	ldi	r26, 0xAB	; 171
  e0:	ba ea       	ldi	r27, 0xAA	; 170
  e2:	32 d0       	rcall	.+100    	; 0x148 <__umulhisi3>
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	92 95       	swap	r25
  ea:	82 95       	swap	r24
  ec:	8f 70       	andi	r24, 0x0F	; 15
  ee:	89 27       	eor	r24, r25
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	89 27       	eor	r24, r25
  f4:	99 27       	eor	r25, r25
	unsigned char tempB;
	switch(leds){
  f6:	89 30       	cpi	r24, 0x09	; 9
  f8:	91 05       	cpc	r25, r1
  fa:	a8 f4       	brcc	.+42     	; 0x126 <lightlevel+0x50>
  fc:	fc 01       	movw	r30, r24
  fe:	ea 5b       	subi	r30, 0xBA	; 186
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	19 c0       	rjmp	.+50     	; 0x136 <__tablejump2__>
		case 8:
			tempB = 0xFF; break;
 104:	4f ef       	ldi	r20, 0xFF	; 255
 106:	0f c0       	rjmp	.+30     	; 0x126 <lightlevel+0x50>
		case 7:
			tempB = 0x7F; break;
 108:	4f e7       	ldi	r20, 0x7F	; 127
 10a:	0d c0       	rjmp	.+26     	; 0x126 <lightlevel+0x50>
		case 6:
			tempB = 0x3F; break;
 10c:	4f e3       	ldi	r20, 0x3F	; 63
 10e:	0b c0       	rjmp	.+22     	; 0x126 <lightlevel+0x50>
		case 5:
			tempB = 0x1F; break;
 110:	4f e1       	ldi	r20, 0x1F	; 31
 112:	09 c0       	rjmp	.+18     	; 0x126 <lightlevel+0x50>
		case 4:
			tempB = 0x0F; break;
 114:	4f e0       	ldi	r20, 0x0F	; 15
 116:	07 c0       	rjmp	.+14     	; 0x126 <lightlevel+0x50>
		case 3:
			tempB = 0x07; break;
 118:	47 e0       	ldi	r20, 0x07	; 7
 11a:	05 c0       	rjmp	.+10     	; 0x126 <lightlevel+0x50>
		case 2:
			tempB = 0x03; break;
 11c:	43 e0       	ldi	r20, 0x03	; 3
 11e:	03 c0       	rjmp	.+6      	; 0x126 <lightlevel+0x50>
		case 1:
			tempB = 0x01; break;
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	01 c0       	rjmp	.+2      	; 0x126 <lightlevel+0x50>
		case 0:
			tempB = 0x00; break;
 124:	40 e0       	ldi	r20, 0x00	; 0
	}
	PORTB = tempB;
 126:	45 b9       	out	0x05, r20	; 5
 128:	08 95       	ret

0000012a <main>:
}
int main(){
	
	//Initialize Registers
	DDRB = 0xFF; PORTB = 0x00;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	84 b9       	out	0x04, r24	; 4
 12e:	15 b8       	out	0x05, r1	; 5
	
	ADC_init();
 130:	cc df       	rcall	.-104    	; 0xca <ADC_init>
	
	while(1){
		lightlevel();
 132:	d1 df       	rcall	.-94     	; 0xd6 <lightlevel>
	}
 134:	fe cf       	rjmp	.-4      	; 0x132 <main+0x8>

00000136 <__tablejump2__>:
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	00 24       	eor	r0, r0
 13c:	00 1c       	adc	r0, r0
 13e:	0b be       	out	0x3b, r0	; 59
 140:	07 90       	elpm	r0, Z+
 142:	f6 91       	elpm	r31, Z
 144:	e0 2d       	mov	r30, r0
 146:	09 94       	ijmp

00000148 <__umulhisi3>:
 148:	a2 9f       	mul	r26, r18
 14a:	b0 01       	movw	r22, r0
 14c:	b3 9f       	mul	r27, r19
 14e:	c0 01       	movw	r24, r0
 150:	a3 9f       	mul	r26, r19
 152:	70 0d       	add	r23, r0
 154:	81 1d       	adc	r24, r1
 156:	11 24       	eor	r1, r1
 158:	91 1d       	adc	r25, r1
 15a:	b2 9f       	mul	r27, r18
 15c:	70 0d       	add	r23, r0
 15e:	81 1d       	adc	r24, r1
 160:	11 24       	eor	r1, r1
 162:	91 1d       	adc	r25, r1
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
