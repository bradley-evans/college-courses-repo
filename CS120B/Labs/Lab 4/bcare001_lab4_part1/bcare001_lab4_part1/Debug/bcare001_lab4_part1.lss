
bcare001_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003d6  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000102  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001dd  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000169  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e6  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	66 c0       	rjmp	.+204    	; 0x178 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:


int main(void)
{
	//Assign and initialize Ports
	DDRA = 0x00; PORTA = 0xFF;
  ae:	11 b8       	out	0x01, r1	; 1
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
  b4:	87 b9       	out	0x07, r24	; 7
  b6:	18 b8       	out	0x08, r1	; 8
	
	
    while (1){
		unsigned char a = ~PINA;
  b8:	80 b1       	in	r24, 0x00	; 0
  ba:	80 95       	com	r24
		//Set PC6 - Low Fuel LED
		if(a <= 4){
  bc:	85 30       	cpi	r24, 0x05	; 5
  be:	30 f4       	brcc	.+12     	; 0xcc <main+0x1e>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c0:	90 91 00 01 	lds	r25, 0x0100
  c4:	90 64       	ori	r25, 0x40	; 64
	
    while (1){
		unsigned char a = ~PINA;
		//Set PC6 - Low Fuel LED
		if(a <= 4){
			tempC=setBit(tempC,6,1);
  c6:	90 93 00 01 	sts	0x0100, r25
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <main+0x28>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  cc:	90 91 00 01 	lds	r25, 0x0100
  d0:	9f 7b       	andi	r25, 0xBF	; 191
		unsigned char a = ~PINA;
		//Set PC6 - Low Fuel LED
		if(a <= 4){
			tempC=setBit(tempC,6,1);
		}else{
			tempC=setBit(tempC,6,0);
  d2:	90 93 00 01 	sts	0x0100, r25
		}
		//Set PC5
		if(a>=1){
  d6:	88 23       	and	r24, r24
  d8:	41 f0       	breq	.+16     	; 0xea <main+0x3c>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  da:	90 91 00 01 	lds	r25, 0x0100
  de:	90 62       	ori	r25, 0x20	; 32
		}else{
			tempC=setBit(tempC,6,0);
		}
		//Set PC5
		if(a>=1){
			tempC=setBit(tempC,5,1);
  e0:	90 93 00 01 	sts	0x0100, r25
		}else{
			tempC=setBit(tempC,5,0);
		}
		//Set PC4
		if(a>=3){
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	38 f4       	brcc	.+14     	; 0xf6 <main+0x48>
  e8:	0a c0       	rjmp	.+20     	; 0xfe <main+0x50>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ea:	90 91 00 01 	lds	r25, 0x0100
  ee:	9f 7d       	andi	r25, 0xDF	; 223
		}
		//Set PC5
		if(a>=1){
			tempC=setBit(tempC,5,1);
		}else{
			tempC=setBit(tempC,5,0);
  f0:	90 93 00 01 	sts	0x0100, r25
  f4:	04 c0       	rjmp	.+8      	; 0xfe <main+0x50>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  f6:	90 61       	ori	r25, 0x10	; 16
		}else{
			tempC=setBit(tempC,5,0);
		}
		//Set PC4
		if(a>=3){
			tempC=setBit(tempC,4,1);
  f8:	90 93 00 01 	sts	0x0100, r25
  fc:	05 c0       	rjmp	.+10     	; 0x108 <main+0x5a>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  fe:	90 91 00 01 	lds	r25, 0x0100
 102:	9f 7e       	andi	r25, 0xEF	; 239
		}
		//Set PC4
		if(a>=3){
			tempC=setBit(tempC,4,1);
		}else{
			tempC=setBit(tempC,4,0);
 104:	90 93 00 01 	sts	0x0100, r25
		}
		//Set PC3
		if(a>=5){
 108:	85 30       	cpi	r24, 0x05	; 5
 10a:	30 f0       	brcs	.+12     	; 0x118 <main+0x6a>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 10c:	90 91 00 01 	lds	r25, 0x0100
 110:	98 60       	ori	r25, 0x08	; 8
		}else{
			tempC=setBit(tempC,4,0);
		}
		//Set PC3
		if(a>=5){
			tempC=setBit(tempC,3,1);
 112:	90 93 00 01 	sts	0x0100, r25
 116:	05 c0       	rjmp	.+10     	; 0x122 <main+0x74>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 118:	90 91 00 01 	lds	r25, 0x0100
 11c:	97 7f       	andi	r25, 0xF7	; 247
		}
		//Set PC3
		if(a>=5){
			tempC=setBit(tempC,3,1);
		}else{
			tempC=setBit(tempC,3,0);
 11e:	90 93 00 01 	sts	0x0100, r25
		}
		//Set PC2
		if(a>=7){
 122:	87 30       	cpi	r24, 0x07	; 7
 124:	30 f0       	brcs	.+12     	; 0x132 <main+0x84>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 126:	90 91 00 01 	lds	r25, 0x0100
 12a:	94 60       	ori	r25, 0x04	; 4
		}else{
			tempC=setBit(tempC,3,0);
		}
		//Set PC2
		if(a>=7){
			tempC=setBit(tempC,2,1);
 12c:	90 93 00 01 	sts	0x0100, r25
 130:	05 c0       	rjmp	.+10     	; 0x13c <main+0x8e>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 132:	90 91 00 01 	lds	r25, 0x0100
 136:	9b 7f       	andi	r25, 0xFB	; 251
		}
		//Set PC2
		if(a>=7){
			tempC=setBit(tempC,2,1);
		}else{
			tempC=setBit(tempC,2,0);
 138:	90 93 00 01 	sts	0x0100, r25
		}
		//Set PC1
		if(a>=10){
 13c:	8a 30       	cpi	r24, 0x0A	; 10
 13e:	30 f0       	brcs	.+12     	; 0x14c <main+0x9e>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 140:	90 91 00 01 	lds	r25, 0x0100
 144:	92 60       	ori	r25, 0x02	; 2
		}else{
			tempC=setBit(tempC,2,0);
		}
		//Set PC1
		if(a>=10){
			tempC=setBit(tempC,1,1);
 146:	90 93 00 01 	sts	0x0100, r25
 14a:	05 c0       	rjmp	.+10     	; 0x156 <main+0xa8>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 14c:	90 91 00 01 	lds	r25, 0x0100
 150:	9d 7f       	andi	r25, 0xFD	; 253
		}
		//Set PC1
		if(a>=10){
			tempC=setBit(tempC,1,1);
		}else{
			tempC=setBit(tempC,1,0);
 152:	90 93 00 01 	sts	0x0100, r25
		}
		//Set PC0
		if(a>=13){
 156:	8d 30       	cpi	r24, 0x0D	; 13
 158:	30 f0       	brcs	.+12     	; 0x166 <main+0xb8>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 15a:	80 91 00 01 	lds	r24, 0x0100
 15e:	81 60       	ori	r24, 0x01	; 1
		}else{
			tempC=setBit(tempC,1,0);
		}
		//Set PC0
		if(a>=13){
			tempC=setBit(tempC,0,1);
 160:	80 93 00 01 	sts	0x0100, r24
 164:	05 c0       	rjmp	.+10     	; 0x170 <main+0xc2>
unsigned char tempC = 0x00;


//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 166:	80 91 00 01 	lds	r24, 0x0100
 16a:	8e 7f       	andi	r24, 0xFE	; 254
		}
		//Set PC0
		if(a>=13){
			tempC=setBit(tempC,0,1);
		}else{
			tempC=setBit(tempC,0,0);
 16c:	80 93 00 01 	sts	0x0100, r24
		}
		//Output to register C
		PORTC = tempC;
 170:	80 91 00 01 	lds	r24, 0x0100
 174:	88 b9       	out	0x08, r24	; 8
	}
 176:	a0 cf       	rjmp	.-192    	; 0xb8 <main+0xa>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
