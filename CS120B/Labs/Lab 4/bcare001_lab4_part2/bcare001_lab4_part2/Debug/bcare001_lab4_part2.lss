
bcare001_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001db  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000134  00000000  00000000  0000048b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ca  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a3  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f3  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	69 d0       	rcall	.+210    	; 0x17c <main>
  aa:	71 c0       	rjmp	.+226    	; 0x18e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <counter>:
}
unsigned char getBit(unsigned char x, unsigned char k){
	return ((x & (0x01 << k)) != 0);
}
void counter(){
	unsigned char a = ~PINA;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
	switch(CNT_State){
  b2:	90 91 00 01 	lds	r25, 0x0100
  b6:	91 30       	cpi	r25, 0x01	; 1
  b8:	79 f0       	breq	.+30     	; 0xd8 <counter+0x2a>
  ba:	30 f0       	brcs	.+12     	; 0xc8 <counter+0x1a>
  bc:	92 30       	cpi	r25, 0x02	; 2
  be:	c1 f1       	breq	.+112    	; 0x130 <counter+0x82>
  c0:	93 30       	cpi	r25, 0x03	; 3
  c2:	09 f4       	brne	.+2      	; 0xc6 <counter+0x18>
  c4:	45 c0       	rjmp	.+138    	; 0x150 <counter+0xa2>
  c6:	56 c0       	rjmp	.+172    	; 0x174 <counter+0xc6>
		case start:
			tempC = 0x00;
  c8:	10 92 02 01 	sts	0x0102, r1
  cc:	10 92 01 01 	sts	0x0101, r1
			CNT_State = init;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 00 01 	sts	0x0100, r24
			break;
  d6:	4e c0       	rjmp	.+156    	; 0x174 <counter+0xc6>
//Function Definitions
unsigned char setBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char getBit(unsigned char x, unsigned char k){
	return ((x & (0x01 << k)) != 0);
  d8:	98 2f       	mov	r25, r24
  da:	91 70       	andi	r25, 0x01	; 1
  dc:	86 95       	lsr	r24
  de:	81 70       	andi	r24, 0x01	; 1
		case start:
			tempC = 0x00;
			CNT_State = init;
			break;
		case init:
			if(getBit(a,0)==getBit(a,1)){
  e0:	98 17       	cp	r25, r24
  e2:	09 f4       	brne	.+2      	; 0xe6 <counter+0x38>
  e4:	47 c0       	rjmp	.+142    	; 0x174 <counter+0xc6>
				CNT_State = init;
			}else if(getBit(a,0) && !getBit(a,1)){
  e6:	99 23       	and	r25, r25
  e8:	91 f0       	breq	.+36     	; 0x10e <counter+0x60>
  ea:	81 11       	cpse	r24, r1
  ec:	43 c0       	rjmp	.+134    	; 0x174 <counter+0xc6>
				CNT_State = A0_press;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 00 01 	sts	0x0100, r24
				if(tempC < 9){
  f4:	80 91 01 01 	lds	r24, 0x0101
  f8:	90 91 02 01 	lds	r25, 0x0102
  fc:	89 30       	cpi	r24, 0x09	; 9
  fe:	91 05       	cpc	r25, r1
 100:	c8 f5       	brcc	.+114    	; 0x174 <counter+0xc6>
					tempC++;
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	90 93 02 01 	sts	0x0102, r25
 108:	80 93 01 01 	sts	0x0101, r24
 10c:	33 c0       	rjmp	.+102    	; 0x174 <counter+0xc6>
				}
			}else if(!getBit(a,0) && getBit(a,1)){
 10e:	88 23       	and	r24, r24
 110:	89 f1       	breq	.+98     	; 0x174 <counter+0xc6>
				CNT_State = A1_press;
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	80 93 00 01 	sts	0x0100, r24
				if(tempC > 0){
 118:	80 91 01 01 	lds	r24, 0x0101
 11c:	90 91 02 01 	lds	r25, 0x0102
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	41 f1       	breq	.+80     	; 0x174 <counter+0xc6>
					tempC--;
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	90 93 02 01 	sts	0x0102, r25
 12a:	80 93 01 01 	sts	0x0101, r24
 12e:	22 c0       	rjmp	.+68     	; 0x174 <counter+0xc6>
				}
			}
			break;
		case A0_press:
			if(getBit(a,0) && !getBit(a,1)){
 130:	80 ff       	sbrs	r24, 0
 132:	0a c0       	rjmp	.+20     	; 0x148 <counter+0x9a>
 134:	81 ff       	sbrs	r24, 1
 136:	1e c0       	rjmp	.+60     	; 0x174 <counter+0xc6>
				CNT_State = A0_press;
			}else if(getBit(a,0) && getBit(a,1)){
				tempC = 0x00;
 138:	10 92 02 01 	sts	0x0102, r1
 13c:	10 92 01 01 	sts	0x0101, r1
				CNT_State = init;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 00 01 	sts	0x0100, r24
 146:	16 c0       	rjmp	.+44     	; 0x174 <counter+0xc6>
			}else{
				CNT_State = init;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 00 01 	sts	0x0100, r24
 14e:	12 c0       	rjmp	.+36     	; 0x174 <counter+0xc6>
			}
			break;
		case A1_press:
			if(!getBit(a,0) && getBit(a,1)){
 150:	80 fd       	sbrc	r24, 0
 152:	03 c0       	rjmp	.+6      	; 0x15a <counter+0xac>
 154:	81 ff       	sbrs	r24, 1
 156:	0b c0       	rjmp	.+22     	; 0x16e <counter+0xc0>
 158:	0d c0       	rjmp	.+26     	; 0x174 <counter+0xc6>
				CNT_State = A1_press;
			}else if(getBit(a,0) && getBit(a,1)){
 15a:	81 ff       	sbrs	r24, 1
 15c:	08 c0       	rjmp	.+16     	; 0x16e <counter+0xc0>
				tempC = 0x00;
 15e:	10 92 02 01 	sts	0x0102, r1
 162:	10 92 01 01 	sts	0x0101, r1
				CNT_State = init;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 00 01 	sts	0x0100, r24
 16c:	03 c0       	rjmp	.+6      	; 0x174 <counter+0xc6>
			}else{
				CNT_State = init;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 00 01 	sts	0x0100, r24
	}
	switch(CNT_State){
		default:
			break;
	}
	PORTC = tempC;
 174:	80 91 01 01 	lds	r24, 0x0101
 178:	88 b9       	out	0x08, r24	; 8
 17a:	08 95       	ret

0000017c <main>:
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; 
 17c:	11 b8       	out	0x01, r1	; 1
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; 
 182:	87 b9       	out	0x07, r24	; 7
 184:	18 b8       	out	0x08, r1	; 8
	CNT_State = start;
 186:	10 92 00 01 	sts	0x0100, r1
		
    while (1){
		counter();
 18a:	91 df       	rcall	.-222    	; 0xae <counter>
	}
 18c:	fe cf       	rjmp	.-4      	; 0x18a <main+0xe>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
