
bcare001_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001b9  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000d7  00000000  00000000  0000054d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000208  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e4  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5d c0       	rjmp	.+186    	; 0xbc <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	98 00       	.word	0x0098	; ????
  8e:	9f 00       	.word	0x009f	; ????
  90:	a6 00       	.word	0x00a6	; ????
  92:	ad 00       	.word	0x00ad	; ????
  94:	b4 00       	.word	0x00b4	; ????
  96:	bb 00       	.word	0x00bb	; ????
  98:	c2 00       	.word	0x00c2	; ????
  9a:	c9 00       	.word	0x00c9	; ????
  9c:	d0 00       	.word	0x00d0	; ????
  9e:	d7 00       	.word	0x00d7	; ????
  a0:	de 00       	.word	0x00de	; ????
  a2:	f5 00       	.word	0x00f5	; ????
  a4:	1f 01       	movw	r2, r30
  a6:	1f 01       	movw	r2, r30
  a8:	fa 00       	.word	0x00fa	; ????
  aa:	fe 00       	.word	0x00fe	; ????
  ac:	02 01       	movw	r0, r4
  ae:	06 01       	movw	r0, r12
  b0:	0a 01       	movw	r0, r20
  b2:	0d 01       	movw	r0, r26
  b4:	11 01       	movw	r2, r2
  b6:	14 01       	movw	r2, r8
  b8:	18 01       	movw	r2, r16
  ba:	1c 01       	movw	r2, r24

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d0 e4       	ldi	r29, 0x40	; 64
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a3 30       	cpi	r26, 0x03	; 3
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	b9 d0       	rcall	.+370    	; 0x24c <main>
  da:	cc c0       	rjmp	.+408    	; 0x274 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <led>:
unsigned char getBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
}	

void led() {
	switch(LED_State) {
  de:	80 91 02 01 	lds	r24, 0x0102
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	51 f0       	breq	.+20     	; 0xfa <led+0x1c>
  e6:	28 f0       	brcs	.+10     	; 0xf2 <led+0x14>
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	51 f0       	breq	.+20     	; 0x100 <led+0x22>
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	91 f0       	breq	.+36     	; 0x114 <led+0x36>
  f0:	6c c0       	rjmp	.+216    	; 0x1ca <led+0xec>
		case start:
			LED_State = LED_init;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 02 01 	sts	0x0102, r24
  f8:	78 c0       	rjmp	.+240    	; 0x1ea <led+0x10c>
			break;
		case LED_init:
			LED_State = LED_1;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 02 01 	sts	0x0102, r24
		case LED_wait1:
			if(~PINA & 0x01){
 100:	00 99       	sbic	0x00, 0	; 0
 102:	04 c0       	rjmp	.+8      	; 0x10c <led+0x2e>
				LED_State = LED_wait1;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 02 01 	sts	0x0102, r24
 10a:	99 c0       	rjmp	.+306    	; 0x23e <led+0x160>
			}else{
				LED_State = LED_wait2;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 02 01 	sts	0x0102, r24
 112:	95 c0       	rjmp	.+298    	; 0x23e <led+0x160>
			}
			break;
		case LED_wait2:
			if(!(~PINA & 0x01)){
 114:	00 99       	sbic	0x00, 0	; 0
 116:	93 c0       	rjmp	.+294    	; 0x23e <led+0x160>
				LED_State= LED_wait2;
			}else{
				switch(tempB){
 118:	e0 91 00 01 	lds	r30, 0x0100
 11c:	8e 2f       	mov	r24, r30
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	8b 30       	cpi	r24, 0x0B	; 11
 122:	91 05       	cpc	r25, r1
 124:	08 f0       	brcs	.+2      	; 0x128 <led+0x4a>
 126:	55 c0       	rjmp	.+170    	; 0x1d2 <led+0xf4>
 128:	fc 01       	movw	r30, r24
 12a:	ea 5b       	subi	r30, 0xBA	; 186
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	99 c0       	rjmp	.+306    	; 0x262 <__tablejump2__>
					case 0:
						LED_State = LED_1; tempB++; break;
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	80 93 02 01 	sts	0x0102, r24
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 00 01 	sts	0x0100, r24
 13c:	4a c0       	rjmp	.+148    	; 0x1d2 <led+0xf4>
					case 1:
						LED_State = LED_2; tempB++; break;
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	80 93 02 01 	sts	0x0102, r24
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 00 01 	sts	0x0100, r24
 14a:	43 c0       	rjmp	.+134    	; 0x1d2 <led+0xf4>
					case 2:
						LED_State = LED_3; tempB++; break;
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	80 93 02 01 	sts	0x0102, r24
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	80 93 00 01 	sts	0x0100, r24
 158:	3c c0       	rjmp	.+120    	; 0x1d2 <led+0xf4>
					case 3:
						LED_State = LED_4; tempB++; break;
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	80 93 02 01 	sts	0x0102, r24
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 00 01 	sts	0x0100, r24
 166:	35 c0       	rjmp	.+106    	; 0x1d2 <led+0xf4>
					case 4:
						LED_State = LED_5; tempB++; break;
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	80 93 02 01 	sts	0x0102, r24
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	80 93 00 01 	sts	0x0100, r24
 174:	2e c0       	rjmp	.+92     	; 0x1d2 <led+0xf4>
					case 5:
						LED_State = LED_6; tempB++; break;
 176:	89 e0       	ldi	r24, 0x09	; 9
 178:	80 93 02 01 	sts	0x0102, r24
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	80 93 00 01 	sts	0x0100, r24
 182:	27 c0       	rjmp	.+78     	; 0x1d2 <led+0xf4>
					case 6:
						LED_State = LED_7; tempB++; break;
 184:	8a e0       	ldi	r24, 0x0A	; 10
 186:	80 93 02 01 	sts	0x0102, r24
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	80 93 00 01 	sts	0x0100, r24
 190:	20 c0       	rjmp	.+64     	; 0x1d2 <led+0xf4>
					case 7:
						LED_State = LED_8; tempB++; break;
 192:	8b e0       	ldi	r24, 0x0B	; 11
 194:	80 93 02 01 	sts	0x0102, r24
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	80 93 00 01 	sts	0x0100, r24
 19e:	19 c0       	rjmp	.+50     	; 0x1d2 <led+0xf4>
					case 8:
						LED_State = LED_9; tempB++; break;
 1a0:	8c e0       	ldi	r24, 0x0C	; 12
 1a2:	80 93 02 01 	sts	0x0102, r24
 1a6:	89 e0       	ldi	r24, 0x09	; 9
 1a8:	80 93 00 01 	sts	0x0100, r24
 1ac:	12 c0       	rjmp	.+36     	; 0x1d2 <led+0xf4>
					case 9:
						LED_State = LED_10; tempB++; break;
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	80 93 02 01 	sts	0x0102, r24
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	80 93 00 01 	sts	0x0100, r24
 1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <led+0xf4>
					case 10:
						LED_State = LED_1; tempB = 0x01; break;
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	80 93 02 01 	sts	0x0102, r24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 00 01 	sts	0x0100, r24
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <led+0xf4>
				}
			}
			break;
		//State transition for ALL LED_# states
		default:
			LED_State = LED_wait1;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 02 01 	sts	0x0102, r24
			break;
 1d0:	36 c0       	rjmp	.+108    	; 0x23e <led+0x160>
	} // Transitions

	switch(LED_State) { // State actions
 1d2:	e0 91 02 01 	lds	r30, 0x0102
 1d6:	8e 2f       	mov	r24, r30
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	ed 30       	cpi	r30, 0x0D	; 13
 1e0:	f1 05       	cpc	r31, r1
 1e2:	68 f5       	brcc	.+90     	; 0x23e <led+0x160>
 1e4:	ef 5a       	subi	r30, 0xAF	; 175
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	3c c0       	rjmp	.+120    	; 0x262 <__tablejump2__>
		case start:
			break;
		case LED_init:
			tempB = 0x00;
 1ea:	10 92 00 01 	sts	0x0100, r1
			tempC = 0x00;
 1ee:	10 92 01 01 	sts	0x0101, r1
			break;
 1f2:	25 c0       	rjmp	.+74     	; 0x23e <led+0x160>
		case LED_wait1: 
			break;
		case LED_wait2: 
			break;
		case LED_1:
			tempC = 0x24; break;
 1f4:	84 e2       	ldi	r24, 0x24	; 36
 1f6:	80 93 01 01 	sts	0x0101, r24
 1fa:	21 c0       	rjmp	.+66     	; 0x23e <led+0x160>
		case LED_2:
			tempC = 0x12; break;
 1fc:	82 e1       	ldi	r24, 0x12	; 18
 1fe:	80 93 01 01 	sts	0x0101, r24
 202:	1d c0       	rjmp	.+58     	; 0x23e <led+0x160>
		case LED_3:
			tempC = 0x09; break;
 204:	89 e0       	ldi	r24, 0x09	; 9
 206:	80 93 01 01 	sts	0x0101, r24
 20a:	19 c0       	rjmp	.+50     	; 0x23e <led+0x160>
		case LED_4:
			tempC = 0x3F; break;
 20c:	8f e3       	ldi	r24, 0x3F	; 63
 20e:	80 93 01 01 	sts	0x0101, r24
 212:	15 c0       	rjmp	.+42     	; 0x23e <led+0x160>
		case LED_5:
			tempC = 0x00; break;
 214:	10 92 01 01 	sts	0x0101, r1
 218:	12 c0       	rjmp	.+36     	; 0x23e <led+0x160>
		case LED_6:
			tempC = 0x3F; break;
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	80 93 01 01 	sts	0x0101, r24
 220:	0e c0       	rjmp	.+28     	; 0x23e <led+0x160>
		case LED_7:
			tempC = 0x00; break;
 222:	10 92 01 01 	sts	0x0101, r1
 226:	0b c0       	rjmp	.+22     	; 0x23e <led+0x160>
		case LED_8:
			tempC = 0x0C; break;
 228:	8c e0       	ldi	r24, 0x0C	; 12
 22a:	80 93 01 01 	sts	0x0101, r24
 22e:	07 c0       	rjmp	.+14     	; 0x23e <led+0x160>
		case LED_9:
			tempC = 0x12; break;
 230:	82 e1       	ldi	r24, 0x12	; 18
 232:	80 93 01 01 	sts	0x0101, r24
 236:	03 c0       	rjmp	.+6      	; 0x23e <led+0x160>
		case LED_10:
			tempC = 0x21; break;
 238:	81 e2       	ldi	r24, 0x21	; 33
 23a:	80 93 01 01 	sts	0x0101, r24
		default:
			break;
	} // State actions
	PORTB = tempB;
 23e:	80 91 00 01 	lds	r24, 0x0100
 242:	85 b9       	out	0x05, r24	; 5
	PORTC = tempC;
 244:	80 91 01 01 	lds	r24, 0x0101
 248:	88 b9       	out	0x08, r24	; 8
 24a:	08 95       	ret

0000024c <main>:
	
}
int main() {
	DDRA = 0x00; PORTA = 0xFF;
 24c:	11 b8       	out	0x01, r1	; 1
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 252:	84 b9       	out	0x04, r24	; 4
 254:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 256:	87 b9       	out	0x07, r24	; 7
 258:	18 b8       	out	0x08, r1	; 8
	LED_State = start; // Initial state
 25a:	10 92 02 01 	sts	0x0102, r1
	while(1) {
		led();
 25e:	3f df       	rcall	.-386    	; 0xde <led>
	} 
 260:	fe cf       	rjmp	.-4      	; 0x25e <main+0x12>

00000262 <__tablejump2__>:
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	00 24       	eor	r0, r0
 268:	00 1c       	adc	r0, r0
 26a:	0b be       	out	0x3b, r0	; 59
 26c:	07 90       	elpm	r0, Z+
 26e:	f6 91       	elpm	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	09 94       	ijmp

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
