
bevan006_bcare001_lab9_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000271  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014a  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024c  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000240  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c5 d0       	rcall	.+394    	; 0x24e <main>
  c4:	ec c0       	rjmp	.+472    	; 0x29e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 06 01 	sts	0x0106, r24
  fc:	90 93 07 01 	sts	0x0107, r25
 100:	a0 93 08 01 	sts	0x0108, r26
 104:	b0 93 09 01 	sts	0x0109, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 06 01 	lds	r24, 0x0106
 126:	90 91 07 01 	lds	r25, 0x0107
 12a:	a0 91 08 01 	lds	r26, 0x0108
 12e:	b0 91 09 01 	lds	r27, 0x0109
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 06 01 	sts	0x0106, r24
 13c:	90 93 07 01 	sts	0x0107, r25
 140:	a0 93 08 01 	sts	0x0108, r26
 144:	b0 93 09 01 	sts	0x0109, r27
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0a 01 	sts	0x010A, r24
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	90 91 01 01 	lds	r25, 0x0101
 15e:	a0 91 02 01 	lds	r26, 0x0102
 162:	b0 91 03 01 	lds	r27, 0x0103
 166:	80 93 06 01 	sts	0x0106, r24
 16a:	90 93 07 01 	sts	0x0107, r25
 16e:	a0 93 08 01 	sts	0x0108, r26
 172:	b0 93 09 01 	sts	0x0109, r27
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <tick>:
enum states3{start3, write} state3;
	
void tick(){
	//unsigned char input = (~PINA && 0x07);
	// Transition statements
	switch(state1){
 188:	80 91 0b 01 	lds	r24, 0x010B
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	61 f0       	breq	.+24     	; 0x1a8 <tick+0x20>
 190:	28 f0       	brcs	.+10     	; 0x19c <tick+0x14>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	69 f0       	breq	.+26     	; 0x1b0 <tick+0x28>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	79 f0       	breq	.+30     	; 0x1b8 <tick+0x30>
 19a:	12 c0       	rjmp	.+36     	; 0x1c0 <tick+0x38>
		case start1:
			threeLEDs = 0;
 19c:	10 92 05 01 	sts	0x0105, r1
			state1 = s1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 0b 01 	sts	0x010B, r24
			break;
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <tick+0x3c>
		case s1:
			state1 = s2;
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 0b 01 	sts	0x010B, r24
			break;
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <tick+0x3c>
		case s2:
			state1 = s3;
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	80 93 0b 01 	sts	0x010B, r24
			break;
 1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <tick+0x3c>
		case s3:
			state1 = s1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 0b 01 	sts	0x010B, r24
			break;
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <tick+0x3c>
		default:
			state1 = start1; break;
 1c0:	10 92 0b 01 	sts	0x010B, r1
	}
	switch(state2){
 1c4:	80 91 0d 01 	lds	r24, 0x010D
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <tick+0x4a>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	31 f0       	breq	.+12     	; 0x1dc <tick+0x54>
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <tick+0x62>
		case start2:
			blinkingLED=0;
 1d2:	10 92 04 01 	sts	0x0104, r1
			state2 = blink;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 0d 01 	sts	0x010D, r24
			break;
		default:
			state3 = start2;
			break;
	}
	switch(state3){
 1dc:	80 91 0c 01 	lds	r24, 0x010C
 1e0:	88 23       	and	r24, r24
 1e2:	19 f0       	breq	.+6      	; 0x1ea <tick+0x62>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <tick+0x70>
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <tick+0x6c>
		case start3:
			PORTB = 0x00;
 1ea:	15 b8       	out	0x05, r1	; 5
			state3 = write;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 0c 01 	sts	0x010C, r24
			break;
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <tick+0x70>
		case write:
			state3 = write;
			break;
		default:
			state3 = start3; 
 1f4:	10 92 0c 01 	sts	0x010C, r1
			break;
	}
	// State actions
		// Transition statements
	switch(state1){
 1f8:	80 91 0b 01 	lds	r24, 0x010B
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	39 f0       	breq	.+14     	; 0x20e <tick+0x86>
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	49 f0       	breq	.+18     	; 0x216 <tick+0x8e>
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	51 f4       	brne	.+20     	; 0x21c <tick+0x94>
		case start1:
			break;
		case s1:
			threeLEDs=0x01;
 208:	80 93 05 01 	sts	0x0105, r24
			break;
 20c:	07 c0       	rjmp	.+14     	; 0x21c <tick+0x94>
		case s2:
			threeLEDs=0x02;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 05 01 	sts	0x0105, r24
			break;
 214:	03 c0       	rjmp	.+6      	; 0x21c <tick+0x94>
		case s3:
			threeLEDs=0x04;
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	80 93 05 01 	sts	0x0105, r24
			break;
		default:
			break;
	}	
	switch(state2){
 21c:	80 91 0d 01 	lds	r24, 0x010D
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	31 f4       	brne	.+12     	; 0x230 <tick+0xa8>
		case start2:
			break;
		case blink:
			blinkingLED = ~(blinkingLED & 0x08);
 224:	80 91 04 01 	lds	r24, 0x0104
 228:	88 70       	andi	r24, 0x08	; 8
 22a:	80 95       	com	r24
 22c:	80 93 04 01 	sts	0x0104, r24
			break;
		default:
			break;
	}
	switch(state3){
 230:	80 91 0c 01 	lds	r24, 0x010C
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	51 f4       	brne	.+20     	; 0x24c <tick+0xc4>
		case start3:
			break;
		case write:
			PORTB = ~(( threeLEDs & 0x07) | (blinkingLED & 0x08));
 238:	80 91 04 01 	lds	r24, 0x0104
 23c:	98 2f       	mov	r25, r24
 23e:	98 70       	andi	r25, 0x08	; 8
 240:	80 91 05 01 	lds	r24, 0x0105
 244:	87 70       	andi	r24, 0x07	; 7
 246:	89 2b       	or	r24, r25
 248:	80 95       	com	r24
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	08 95       	ret

0000024e <main>:
			break;
	}
}
int main(){
	//Initialize Registers
	DDRB = 0xFF; PORTB = 0x00;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	84 b9       	out	0x04, r24	; 4
 252:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 254:	11 b8       	out	0x01, r1	; 1
 256:	82 b9       	out	0x02, r24	; 2
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 258:	88 ee       	ldi	r24, 0xE8	; 232
 25a:	93 e0       	ldi	r25, 0x03	; 3
 25c:	a0 e0       	ldi	r26, 0x00	; 0
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	80 93 00 01 	sts	0x0100, r24
 264:	90 93 01 01 	sts	0x0101, r25
 268:	a0 93 02 01 	sts	0x0102, r26
 26c:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 270:	80 93 06 01 	sts	0x0106, r24
 274:	90 93 07 01 	sts	0x0107, r25
 278:	a0 93 08 01 	sts	0x0108, r26
 27c:	b0 93 09 01 	sts	0x0109, r27
	DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0x00; PORTA = 0xFF;
	
	//Set Timers
	TimerSet(1000);
	TimerOn();
 280:	23 df       	rcall	.-442    	; 0xc8 <TimerOn>
	
	//Variables
	state1 = start1;
 282:	10 92 0b 01 	sts	0x010B, r1
	state2 = start2;
 286:	10 92 0d 01 	sts	0x010D, r1
	state3 = start3;
 28a:	10 92 0c 01 	sts	0x010C, r1
	
	while(1) {
		while (!TimerFlag);
 28e:	80 91 0a 01 	lds	r24, 0x010A
 292:	88 23       	and	r24, r24
 294:	e1 f3       	breq	.-8      	; 0x28e <main+0x40>
		TimerFlag = 0;
 296:	10 92 0a 01 	sts	0x010A, r1
		tick();
 29a:	76 df       	rcall	.-276    	; 0x188 <tick>
	}
 29c:	f8 cf       	rjmp	.-16     	; 0x28e <main+0x40>

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
