
bevan006_bcare001_lab9_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800104  00800104  000004a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000327  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000179  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b4  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000285  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000115  00000000  00000000  00001115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000122a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	79 d1       	rcall	.+754    	; 0x3b6 <main>
  c4:	a2 c1       	rjmp	.+836    	; 0x40a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 09 01 	sts	0x0109, r24
  fc:	90 93 0a 01 	sts	0x010A, r25
 100:	a0 93 0b 01 	sts	0x010B, r26
 104:	b0 93 0c 01 	sts	0x010C, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 09 01 	lds	r24, 0x0109
 126:	90 91 0a 01 	lds	r25, 0x010A
 12a:	a0 91 0b 01 	lds	r26, 0x010B
 12e:	b0 91 0c 01 	lds	r27, 0x010C
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 09 01 	sts	0x0109, r24
 13c:	90 93 0a 01 	sts	0x010A, r25
 140:	a0 93 0b 01 	sts	0x010B, r26
 144:	b0 93 0c 01 	sts	0x010C, r27
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0d 01 	sts	0x010D, r24
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	90 91 01 01 	lds	r25, 0x0101
 15e:	a0 91 02 01 	lds	r26, 0x0102
 162:	b0 91 03 01 	lds	r27, 0x0103
 166:	80 93 09 01 	sts	0x0109, r24
 16a:	90 93 0a 01 	sts	0x010A, r25
 16e:	a0 93 0b 01 	sts	0x010B, r26
 172:	b0 93 0c 01 	sts	0x010C, r27
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <tick_pulseA>:
enum states2{start2, waitB, pulseB_sec, pulseB_fast} state2;
enum states3{start3, update_count} state3;
	
void tick_pulseA(){
	// Transition statements
	unsigned char a = (~PINA & 0x03);
 188:	80 b1       	in	r24, 0x00	; 0
	a = (~PINA & 0x03);
 18a:	80 b1       	in	r24, 0x00	; 0
 18c:	80 95       	com	r24
 18e:	83 70       	andi	r24, 0x03	; 3
	switch(state1) {
 190:	90 91 0e 01 	lds	r25, 0x010E
 194:	91 30       	cpi	r25, 0x01	; 1
 196:	51 f0       	breq	.+20     	; 0x1ac <tick_pulseA+0x24>
 198:	28 f0       	brcs	.+10     	; 0x1a4 <tick_pulseA+0x1c>
 19a:	92 30       	cpi	r25, 0x02	; 2
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <tick_pulseA+0x40>
 19e:	93 30       	cpi	r25, 0x03	; 3
 1a0:	39 f1       	breq	.+78     	; 0x1f0 <tick_pulseA+0x68>
 1a2:	32 c0       	rjmp	.+100    	; 0x208 <tick_pulseA+0x80>
		case start1:
			state1 = waitA;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 0e 01 	sts	0x010E, r24
			break;
 1aa:	39 c0       	rjmp	.+114    	; 0x21e <tick_pulseA+0x96>
		case waitA:
			pulseA = 0;
 1ac:	10 92 07 01 	sts	0x0107, r1
			if (a == 0x01) {
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	31 f4       	brne	.+12     	; 0x1c0 <tick_pulseA+0x38>
				state1 = pulseA_sec;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	80 93 0e 01 	sts	0x010E, r24
				countA = 0;
 1ba:	10 92 05 01 	sts	0x0105, r1
 1be:	27 c0       	rjmp	.+78     	; 0x20e <tick_pulseA+0x86>
			} else {
				state1 = waitA;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 0e 01 	sts	0x010E, r24
 1c6:	2b c0       	rjmp	.+86     	; 0x21e <tick_pulseA+0x96>
			}
			break;
		case pulseA_sec:
			if (a == 0x01) {
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <tick_pulseA+0x60>
				if (countA < 15) {
 1cc:	80 91 05 01 	lds	r24, 0x0105
 1d0:	8f 30       	cpi	r24, 0x0F	; 15
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <tick_pulseA+0x54>
					state1 = pulseA_sec;
					countA++;
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 05 01 	sts	0x0105, r24
 1da:	19 c0       	rjmp	.+50     	; 0x20e <tick_pulseA+0x86>
				} else {
					state1 = pulseA_fast;
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	80 93 0e 01 	sts	0x010E, r24
					countA = 0;
 1e2:	10 92 05 01 	sts	0x0105, r1
 1e6:	13 c0       	rjmp	.+38     	; 0x20e <tick_pulseA+0x86>
				}
			} else {
				state1 = waitA;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 0e 01 	sts	0x010E, r24
 1ee:	17 c0       	rjmp	.+46     	; 0x21e <tick_pulseA+0x96>
			}
			break;
		case pulseA_fast:
			if (a == 0x01) {
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	31 f4       	brne	.+12     	; 0x200 <tick_pulseA+0x78>
				countA++;
 1f4:	80 91 05 01 	lds	r24, 0x0105
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 05 01 	sts	0x0105, r24
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <tick_pulseA+0x86>
			} else {
				state1 = waitA;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 0e 01 	sts	0x010E, r24
 206:	0b c0       	rjmp	.+22     	; 0x21e <tick_pulseA+0x96>
			}
			break;
		default:
			state1 = start1;
 208:	10 92 0e 01 	sts	0x010E, r1
 20c:	08 95       	ret
			break;
	}
	switch(state1) {
 20e:	80 91 0e 01 	lds	r24, 0x010E
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	39 f0       	breq	.+14     	; 0x224 <tick_pulseA+0x9c>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	c9 f0       	breq	.+50     	; 0x24c <tick_pulseA+0xc4>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	01 f5       	brne	.+64     	; 0x25e <tick_pulseA+0xd6>
		case start1:
			break;
		case waitA:
			pulseA = 0;
 21e:	10 92 07 01 	sts	0x0107, r1
			break;
 222:	08 95       	ret
		case pulseA_sec:
			pulseA = 0;
 224:	10 92 07 01 	sts	0x0107, r1
			if ( (countA % 5) == 0 ) {
 228:	90 91 05 01 	lds	r25, 0x0105
 22c:	8d ec       	ldi	r24, 0xCD	; 205
 22e:	98 9f       	mul	r25, r24
 230:	81 2d       	mov	r24, r1
 232:	11 24       	eor	r1, r1
 234:	86 95       	lsr	r24
 236:	86 95       	lsr	r24
 238:	28 2f       	mov	r18, r24
 23a:	22 0f       	add	r18, r18
 23c:	22 0f       	add	r18, r18
 23e:	82 0f       	add	r24, r18
 240:	98 13       	cpse	r25, r24
 242:	0d c0       	rjmp	.+26     	; 0x25e <tick_pulseA+0xd6>
				pulseA = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 07 01 	sts	0x0107, r24
 24a:	08 95       	ret
			}
			break;
		case pulseA_fast:
			pulseA = 0;
 24c:	10 92 07 01 	sts	0x0107, r1
			if ( (countA % 2) == 0 ) {
 250:	80 91 05 01 	lds	r24, 0x0105
 254:	80 fd       	sbrc	r24, 0
 256:	03 c0       	rjmp	.+6      	; 0x25e <tick_pulseA+0xd6>
				pulseA = 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 07 01 	sts	0x0107, r24
 25e:	08 95       	ret

00000260 <tick_pulseB>:
	}	
}

void tick_pulseB(){
	// Transition statements
	unsigned char a = (~PINA & 0x07);
 260:	80 b1       	in	r24, 0x00	; 0
	a = (~PINA & 0x07);
 262:	80 b1       	in	r24, 0x00	; 0
 264:	80 95       	com	r24
 266:	87 70       	andi	r24, 0x07	; 7
	switch(state2) {
 268:	90 91 10 01 	lds	r25, 0x0110
 26c:	91 30       	cpi	r25, 0x01	; 1
 26e:	59 f0       	breq	.+22     	; 0x286 <tick_pulseB+0x26>
 270:	28 f0       	brcs	.+10     	; 0x27c <tick_pulseB+0x1c>
 272:	92 30       	cpi	r25, 0x02	; 2
 274:	91 f0       	breq	.+36     	; 0x29a <tick_pulseB+0x3a>
 276:	93 30       	cpi	r25, 0x03	; 3
 278:	09 f1       	breq	.+66     	; 0x2bc <tick_pulseB+0x5c>
 27a:	28 c0       	rjmp	.+80     	; 0x2cc <tick_pulseB+0x6c>
	}
	switch(state2) {
		case start2:
			break;
		case waitB:
			pulseB = 0;
 27c:	10 92 06 01 	sts	0x0106, r1
			if (a == 0x02) {
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	39 f1       	breq	.+78     	; 0x2d2 <tick_pulseB+0x72>
 284:	2c c0       	rjmp	.+88     	; 0x2de <tick_pulseB+0x7e>
		case start2:
			pulseB = 0;
			state2 = waitB;
			break;
		case waitB:
			pulseB = 0;
 286:	10 92 06 01 	sts	0x0106, r1
			if (a == 0x02) {
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	09 f0       	breq	.+2      	; 0x290 <tick_pulseB+0x30>
 28e:	55 c0       	rjmp	.+170    	; 0x33a <tick_pulseB+0xda>
				state2 = pulseB_sec;
 290:	80 93 10 01 	sts	0x0110, r24
				countB = 0;
 294:	10 92 04 01 	sts	0x0104, r1
 298:	47 c0       	rjmp	.+142    	; 0x328 <tick_pulseB+0xc8>
			} else {
				state2 = waitB;
			}
			break;
		case pulseB_sec:
			if (a == 0x02) {
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	09 f0       	breq	.+2      	; 0x2a0 <tick_pulseB+0x40>
 29e:	4d c0       	rjmp	.+154    	; 0x33a <tick_pulseB+0xda>
				if (countB < 15) {
 2a0:	80 91 04 01 	lds	r24, 0x0104
 2a4:	8f 30       	cpi	r24, 0x0F	; 15
 2a6:	20 f4       	brcc	.+8      	; 0x2b0 <tick_pulseB+0x50>
					state2 = pulseB_sec;
					countB++;
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 04 01 	sts	0x0104, r24
 2ae:	3c c0       	rjmp	.+120    	; 0x328 <tick_pulseB+0xc8>
				} else {
					state2 = pulseB_fast;
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	80 93 10 01 	sts	0x0110, r24
					countB = 0;
 2b6:	10 92 04 01 	sts	0x0104, r1
 2ba:	36 c0       	rjmp	.+108    	; 0x328 <tick_pulseB+0xc8>
			} else {
				state2 = waitB;
			}
			break;
		case pulseB_fast:
			if (a == 0x02) {
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	e9 f5       	brne	.+122    	; 0x33a <tick_pulseB+0xda>
				countB++;
 2c0:	80 91 04 01 	lds	r24, 0x0104
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 04 01 	sts	0x0104, r24
 2ca:	2e c0       	rjmp	.+92     	; 0x328 <tick_pulseB+0xc8>
			} else {
				state2 = waitB;
			}
			break;
		default:
			state2 = start2;
 2cc:	10 92 10 01 	sts	0x0110, r1
 2d0:	08 95       	ret
		case start2:
			break;
		case waitB:
			pulseB = 0;
			if (a == 0x02) {
				state2 = pulseB_sec;
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	80 93 10 01 	sts	0x0110, r24
				countB = 0;
 2d8:	10 92 04 01 	sts	0x0104, r1
 2dc:	08 95       	ret
			} else {
				state2 = waitB;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 10 01 	sts	0x0110, r24
 2e4:	08 95       	ret
			}
			break;
		case pulseB_sec:
			pulseB = 0;
 2e6:	10 92 06 01 	sts	0x0106, r1
			if ( (countB % 5) == 0 ) {
 2ea:	90 91 04 01 	lds	r25, 0x0104
 2ee:	8d ec       	ldi	r24, 0xCD	; 205
 2f0:	98 9f       	mul	r25, r24
 2f2:	81 2d       	mov	r24, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	86 95       	lsr	r24
 2f8:	86 95       	lsr	r24
 2fa:	28 2f       	mov	r18, r24
 2fc:	22 0f       	add	r18, r18
 2fe:	22 0f       	add	r18, r18
 300:	82 0f       	add	r24, r18
 302:	98 13       	cpse	r25, r24
 304:	1d c0       	rjmp	.+58     	; 0x340 <tick_pulseB+0xe0>
				pulseB = 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 06 01 	sts	0x0106, r24
 30c:	08 95       	ret
			}
			break;
		case pulseB_fast:
			pulseB = 0;
 30e:	10 92 06 01 	sts	0x0106, r1
			if ( (countB % 2) == 0 ) {
 312:	80 91 04 01 	lds	r24, 0x0104
 316:	80 fd       	sbrc	r24, 0
 318:	13 c0       	rjmp	.+38     	; 0x340 <tick_pulseB+0xe0>
				pulseB = 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 06 01 	sts	0x0106, r24
 320:	08 95       	ret
	}
	switch(state2) {
		case start2:
			break;
		case waitB:
			pulseB = 0;
 322:	10 92 06 01 	sts	0x0106, r1
 326:	d5 cf       	rjmp	.-86     	; 0x2d2 <tick_pulseB+0x72>
			break;
		default:
			state2 = start2;
			break;
	}
	switch(state2) {
 328:	80 91 10 01 	lds	r24, 0x0110
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	d9 f2       	breq	.-74     	; 0x2e6 <tick_pulseB+0x86>
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	69 f3       	breq	.-38     	; 0x30e <tick_pulseB+0xae>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	21 f4       	brne	.+8      	; 0x340 <tick_pulseB+0xe0>
 338:	f4 cf       	rjmp	.-24     	; 0x322 <tick_pulseB+0xc2>
		case start2:
			break;
		case waitB:
			pulseB = 0;
 33a:	10 92 06 01 	sts	0x0106, r1
 33e:	cf cf       	rjmp	.-98     	; 0x2de <tick_pulseB+0x7e>
 340:	08 95       	ret

00000342 <tick_counter>:
			break;
	}
}

void tick_counter() {
	unsigned char a = (~PINA & 0x07);
 342:	80 b1       	in	r24, 0x00	; 0
 344:	80 95       	com	r24
 346:	87 70       	andi	r24, 0x07	; 7
	switch (state3) {
 348:	90 91 0f 01 	lds	r25, 0x010F
 34c:	99 23       	and	r25, r25
 34e:	19 f0       	breq	.+6      	; 0x356 <tick_counter+0x14>
 350:	91 30       	cpi	r25, 0x01	; 1
 352:	39 f0       	breq	.+14     	; 0x362 <tick_counter+0x20>
 354:	28 c0       	rjmp	.+80     	; 0x3a6 <tick_counter+0x64>
		case start3:
			num = 0x00;
 356:	10 92 08 01 	sts	0x0108, r1
			state3 = update_count;
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	90 93 0f 01 	sts	0x010F, r25
			break;
 360:	22 c0       	rjmp	.+68     	; 0x3a6 <tick_counter+0x64>
		case update_count:
			if (pulseA == 1 && pulseB == 1) {
 362:	90 91 07 01 	lds	r25, 0x0107
 366:	91 30       	cpi	r25, 0x01	; 1
 368:	89 f4       	brne	.+34     	; 0x38c <tick_counter+0x4a>
 36a:	90 91 06 01 	lds	r25, 0x0106
 36e:	91 30       	cpi	r25, 0x01	; 1
 370:	19 f4       	brne	.+6      	; 0x378 <tick_counter+0x36>
				num = 0; 
 372:	10 92 08 01 	sts	0x0108, r1
 376:	17 c0       	rjmp	.+46     	; 0x3a6 <tick_counter+0x64>
			} else if (pulseA == 1 && pulseB == 0 && num < 9) {
 378:	91 11       	cpse	r25, r1
 37a:	15 c0       	rjmp	.+42     	; 0x3a6 <tick_counter+0x64>
 37c:	90 91 08 01 	lds	r25, 0x0108
 380:	99 30       	cpi	r25, 0x09	; 9
 382:	88 f4       	brcc	.+34     	; 0x3a6 <tick_counter+0x64>
				num++; 
 384:	9f 5f       	subi	r25, 0xFF	; 255
 386:	90 93 08 01 	sts	0x0108, r25
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <tick_counter+0x64>
			} else if (pulseA == 0 && pulseB == 1 && num > 0) {
 38c:	91 11       	cpse	r25, r1
 38e:	0b c0       	rjmp	.+22     	; 0x3a6 <tick_counter+0x64>
 390:	90 91 06 01 	lds	r25, 0x0106
 394:	91 30       	cpi	r25, 0x01	; 1
 396:	39 f4       	brne	.+14     	; 0x3a6 <tick_counter+0x64>
 398:	90 91 08 01 	lds	r25, 0x0108
 39c:	99 23       	and	r25, r25
 39e:	19 f0       	breq	.+6      	; 0x3a6 <tick_counter+0x64>
				num--; 
 3a0:	91 50       	subi	r25, 0x01	; 1
 3a2:	90 93 08 01 	sts	0x0108, r25
			}
			
	}
	if (a == 0x03) {
 3a6:	83 30       	cpi	r24, 0x03	; 3
 3a8:	11 f4       	brne	.+4      	; 0x3ae <tick_counter+0x6c>
		num = 0x00;
 3aa:	10 92 08 01 	sts	0x0108, r1
	}
	PORTB = num;
 3ae:	80 91 08 01 	lds	r24, 0x0108
 3b2:	85 b9       	out	0x05, r24	; 5
 3b4:	08 95       	ret

000003b6 <main>:
}

int main(){
	//Initialize Registers
	DDRB = 0xFF; PORTB = 0x00;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	84 b9       	out	0x04, r24	; 4
 3ba:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 3bc:	11 b8       	out	0x01, r1	; 1
 3be:	82 b9       	out	0x02, r24	; 2
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 3c0:	88 ec       	ldi	r24, 0xC8	; 200
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	a0 e0       	ldi	r26, 0x00	; 0
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	80 93 00 01 	sts	0x0100, r24
 3cc:	90 93 01 01 	sts	0x0101, r25
 3d0:	a0 93 02 01 	sts	0x0102, r26
 3d4:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 3d8:	80 93 09 01 	sts	0x0109, r24
 3dc:	90 93 0a 01 	sts	0x010A, r25
 3e0:	a0 93 0b 01 	sts	0x010B, r26
 3e4:	b0 93 0c 01 	sts	0x010C, r27
	DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0x00; PORTA = 0xFF;
	
	//Set Timers
	TimerSet(200);
	TimerOn();
 3e8:	6f de       	rcall	.-802    	; 0xc8 <TimerOn>
	
	//Variables
	state1 = start1;
 3ea:	10 92 0e 01 	sts	0x010E, r1
	state2 = start2;
 3ee:	10 92 10 01 	sts	0x0110, r1
	state3 = start3;
 3f2:	10 92 0f 01 	sts	0x010F, r1
	while(1) {
		while (!TimerFlag);
 3f6:	80 91 0d 01 	lds	r24, 0x010D
 3fa:	88 23       	and	r24, r24
 3fc:	e1 f3       	breq	.-8      	; 0x3f6 <main+0x40>
		TimerFlag = 0;
 3fe:	10 92 0d 01 	sts	0x010D, r1
		tick_pulseA();
 402:	c2 de       	rcall	.-636    	; 0x188 <tick_pulseA>
		tick_pulseB();
 404:	2d df       	rcall	.-422    	; 0x260 <tick_pulseB>
		tick_counter();
 406:	9d df       	rcall	.-198    	; 0x342 <tick_counter>
	}
 408:	f6 cf       	rjmp	.-20     	; 0x3f6 <main+0x40>

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
