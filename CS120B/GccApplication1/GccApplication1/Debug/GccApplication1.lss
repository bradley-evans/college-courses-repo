
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000145  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000105  00000000  00000000  000004dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016b  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
   6:	00 00       	nop
   8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
   a:	00 00       	nop
   c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
   e:	00 00       	nop
  10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
  12:	00 00       	nop
  14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
  16:	00 00       	nop
  18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
  1e:	00 00       	nop
  20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
  22:	00 00       	nop
  24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
  26:	00 00       	nop
  28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
  32:	00 00       	nop
  34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
  36:	00 00       	nop
  38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
  3e:	00 00       	nop
  40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
  42:	00 00       	nop
  44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
  46:	00 00       	nop
  48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
  52:	00 00       	nop
  54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
  56:	00 00       	nop
  58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
  5e:	00 00       	nop
  60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
  62:	00 00       	nop
  64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
  66:	00 00       	nop
  68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
  72:	00 00       	nop
  74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
  76:	00 00       	nop
  78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
  7e:	00 00       	nop
  80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
  82:	00 00       	nop
  84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
  86:	00 00       	nop
  88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1b 01       	movw	r2, r22
  8e:	41 01       	movw	r8, r2
  90:	41 01       	movw	r8, r2
  92:	41 01       	movw	r8, r2
  94:	41 01       	movw	r8, r2
  96:	41 01       	movw	r8, r2
  98:	41 01       	movw	r8, r2
  9a:	41 01       	movw	r8, r2
  9c:	41 01       	movw	r8, r2
  9e:	41 01       	movw	r8, r2
  a0:	41 01       	movw	r8, r2
  a2:	41 01       	movw	r8, r2
  a4:	41 01       	movw	r8, r2
  a6:	41 01       	movw	r8, r2
  a8:	41 01       	movw	r8, r2
  aa:	41 01       	movw	r8, r2
  ac:	41 01       	movw	r8, r2
  ae:	41 01       	movw	r8, r2
  b0:	41 01       	movw	r8, r2
  b2:	41 01       	movw	r8, r2
  b4:	41 01       	movw	r8, r2
  b6:	41 01       	movw	r8, r2
  b8:	41 01       	movw	r8, r2
  ba:	41 01       	movw	r8, r2
  bc:	41 01       	movw	r8, r2
  be:	41 01       	movw	r8, r2
  c0:	41 01       	movw	r8, r2
  c2:	41 01       	movw	r8, r2
  c4:	41 01       	movw	r8, r2
  c6:	41 01       	movw	r8, r2
  c8:	41 01       	movw	r8, r2
  ca:	41 01       	movw	r8, r2
  cc:	41 01       	movw	r8, r2
  ce:	41 01       	movw	r8, r2
  d0:	41 01       	movw	r8, r2
  d2:	3f 01       	movw	r6, r30
  d4:	41 01       	movw	r8, r2
  d6:	41 01       	movw	r8, r2
  d8:	41 01       	movw	r8, r2
  da:	41 01       	movw	r8, r2
  dc:	41 01       	movw	r8, r2
  de:	41 01       	movw	r8, r2
  e0:	3b 01       	movw	r6, r22
  e2:	41 01       	movw	r8, r2
  e4:	41 01       	movw	r8, r2
  e6:	41 01       	movw	r8, r2
  e8:	41 01       	movw	r8, r2
  ea:	41 01       	movw	r8, r2
  ec:	3d 01       	movw	r6, r26
  ee:	1d 01       	movw	r2, r26
  f0:	20 01       	movw	r4, r0
  f2:	23 01       	movw	r4, r6
  f4:	26 01       	movw	r4, r12
  f6:	29 01       	movw	r4, r18
  f8:	2b 01       	movw	r4, r22
  fa:	2d 01       	movw	r4, r26
  fc:	2f 01       	movw	r4, r30
  fe:	31 01       	movw	r6, r2
 100:	41 01       	movw	r8, r2
 102:	41 01       	movw	r8, r2
 104:	41 01       	movw	r8, r2
 106:	41 01       	movw	r8, r2
 108:	41 01       	movw	r8, r2
 10a:	41 01       	movw	r8, r2
 10c:	41 01       	movw	r8, r2
 10e:	33 01       	movw	r6, r6
 110:	35 01       	movw	r6, r10
 112:	37 01       	movw	r6, r14
 114:	39 01       	movw	r6, r18

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
 122:	53 d0       	rcall	.+166    	; 0x1ca <main>
 124:	b9 c0       	rjmp	.+370    	; 0x298 <_exit>

00000126 <__bad_interrupt>:
 126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <GetKeypadKey>:
PC1 2 4 | 5 | 6 | B
PC2 3 7 | 8 | 9 | C
PC3 4 * | 0 | # | D
*/
unsigned char GetKeypadKey() {
PORTC = 0xEF; // Enable col 4 with 0, disable others with 1’s
 128:	8f ee       	ldi	r24, 0xEF	; 239
 12a:	88 b9       	out	0x08, r24	; 8
asm("nop"); // add a delay to allow PORTC to stabilize before checking
 12c:	00 00       	nop
if (GetBit(PINC,0)==0) { return('1'); }
 12e:	30 9b       	sbis	0x06, 0	; 6
 130:	2c c0       	rjmp	.+88     	; 0x18a <GetKeypadKey+0x62>
if (GetBit(PINC,1)==0) { return('4'); }
 132:	31 9b       	sbis	0x06, 1	; 6
 134:	2c c0       	rjmp	.+88     	; 0x18e <GetKeypadKey+0x66>
if (GetBit(PINC,2)==0) { return('7'); }
 136:	32 9b       	sbis	0x06, 2	; 6
 138:	2c c0       	rjmp	.+88     	; 0x192 <GetKeypadKey+0x6a>
if (GetBit(PINC,3)==0) { return('*'); }
 13a:	33 9b       	sbis	0x06, 3	; 6
 13c:	2c c0       	rjmp	.+88     	; 0x196 <GetKeypadKey+0x6e>
// Check keys in col 2
PORTC = 0xDF; // Enable col 5 with 0, disable others with 1’s
 13e:	8f ed       	ldi	r24, 0xDF	; 223
 140:	88 b9       	out	0x08, r24	; 8
asm("nop"); // add a delay to allow PORTC to stabilize before checking
 142:	00 00       	nop
if (GetBit(PINC,0)==0) { return('2'); }
 144:	30 9b       	sbis	0x06, 0	; 6
 146:	29 c0       	rjmp	.+82     	; 0x19a <GetKeypadKey+0x72>
if (GetBit(PINC,1)==0) { return('5'); }
 148:	31 9b       	sbis	0x06, 1	; 6
 14a:	29 c0       	rjmp	.+82     	; 0x19e <GetKeypadKey+0x76>
if (GetBit(PINC,2)==0) { return('8'); }
 14c:	32 9b       	sbis	0x06, 2	; 6
 14e:	29 c0       	rjmp	.+82     	; 0x1a2 <GetKeypadKey+0x7a>
if (GetBit(PINC,3)==0) { return('0'); }
 150:	33 9b       	sbis	0x06, 3	; 6
 152:	29 c0       	rjmp	.+82     	; 0x1a6 <GetKeypadKey+0x7e>
	
PORTC = 0xBF; // Enable col 5 with 0, disable others with 1’s
 154:	8f eb       	ldi	r24, 0xBF	; 191
 156:	88 b9       	out	0x08, r24	; 8
asm("nop");	
 158:	00 00       	nop
if (GetBit(PINC,0)==0) { return('3'); }
 15a:	30 9b       	sbis	0x06, 0	; 6
 15c:	26 c0       	rjmp	.+76     	; 0x1aa <GetKeypadKey+0x82>
if (GetBit(PINC,1)==0) { return('6'); }
 15e:	31 9b       	sbis	0x06, 1	; 6
 160:	26 c0       	rjmp	.+76     	; 0x1ae <GetKeypadKey+0x86>
if (GetBit(PINC,2)==0) { return('9'); }
 162:	32 9b       	sbis	0x06, 2	; 6
 164:	26 c0       	rjmp	.+76     	; 0x1b2 <GetKeypadKey+0x8a>
if (GetBit(PINC,3)==0) { return('*'); }
 166:	33 9b       	sbis	0x06, 3	; 6
 168:	26 c0       	rjmp	.+76     	; 0x1b6 <GetKeypadKey+0x8e>
	
PORTC = 0x7F; // Enable col 5 with 0, disable others with 1’s
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	88 b9       	out	0x08, r24	; 8
asm("nop");
 16e:	00 00       	nop
if (GetBit(PINC,0)==0) { return('A'); }
 170:	30 9b       	sbis	0x06, 0	; 6
 172:	23 c0       	rjmp	.+70     	; 0x1ba <GetKeypadKey+0x92>
if (GetBit(PINC,1)==0) { return('B'); }
 174:	31 9b       	sbis	0x06, 1	; 6
 176:	23 c0       	rjmp	.+70     	; 0x1be <GetKeypadKey+0x96>
if (GetBit(PINC,2)==0) { return('C'); }
 178:	32 9b       	sbis	0x06, 2	; 6
 17a:	23 c0       	rjmp	.+70     	; 0x1c2 <GetKeypadKey+0x9a>
if (GetBit(PINC,3)==0) { return('D'); }
 17c:	33 9b       	sbis	0x06, 3	; 6
 17e:	23 c0       	rjmp	.+70     	; 0x1c6 <GetKeypadKey+0x9e>
	
// ... *****FINISH*****
// Check keys in col 3
PORTC = 0xBF; // Enable col 6 with 0, disable others with 1’s
 180:	8f eb       	ldi	r24, 0xBF	; 191
 182:	88 b9       	out	0x08, r24	; 8
asm("nop"); // add a delay to allow PORTC to stabilize before checking
 184:	00 00       	nop
// ... *****FINISH*****
// Check keys in col 4
// ... *****FINISH*****
return('\0'); // default value
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
PC3 4 * | 0 | # | D
*/
unsigned char GetKeypadKey() {
PORTC = 0xEF; // Enable col 4 with 0, disable others with 1’s
asm("nop"); // add a delay to allow PORTC to stabilize before checking
if (GetBit(PINC,0)==0) { return('1'); }
 18a:	81 e3       	ldi	r24, 0x31	; 49
 18c:	08 95       	ret
if (GetBit(PINC,1)==0) { return('4'); }
 18e:	84 e3       	ldi	r24, 0x34	; 52
 190:	08 95       	ret
if (GetBit(PINC,2)==0) { return('7'); }
 192:	87 e3       	ldi	r24, 0x37	; 55
 194:	08 95       	ret
if (GetBit(PINC,3)==0) { return('*'); }
 196:	8a e2       	ldi	r24, 0x2A	; 42
 198:	08 95       	ret
// Check keys in col 2
PORTC = 0xDF; // Enable col 5 with 0, disable others with 1’s
asm("nop"); // add a delay to allow PORTC to stabilize before checking
if (GetBit(PINC,0)==0) { return('2'); }
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	08 95       	ret
if (GetBit(PINC,1)==0) { return('5'); }
 19e:	85 e3       	ldi	r24, 0x35	; 53
 1a0:	08 95       	ret
if (GetBit(PINC,2)==0) { return('8'); }
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	08 95       	ret
if (GetBit(PINC,3)==0) { return('0'); }
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	08 95       	ret
	
PORTC = 0xBF; // Enable col 5 with 0, disable others with 1’s
asm("nop");	
if (GetBit(PINC,0)==0) { return('3'); }
 1aa:	83 e3       	ldi	r24, 0x33	; 51
 1ac:	08 95       	ret
if (GetBit(PINC,1)==0) { return('6'); }
 1ae:	86 e3       	ldi	r24, 0x36	; 54
 1b0:	08 95       	ret
if (GetBit(PINC,2)==0) { return('9'); }
 1b2:	89 e3       	ldi	r24, 0x39	; 57
 1b4:	08 95       	ret
if (GetBit(PINC,3)==0) { return('*'); }
 1b6:	8a e2       	ldi	r24, 0x2A	; 42
 1b8:	08 95       	ret
	
PORTC = 0x7F; // Enable col 5 with 0, disable others with 1’s
asm("nop");
if (GetBit(PINC,0)==0) { return('A'); }
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	08 95       	ret
if (GetBit(PINC,1)==0) { return('B'); }
 1be:	82 e4       	ldi	r24, 0x42	; 66
 1c0:	08 95       	ret
if (GetBit(PINC,2)==0) { return('C'); }
 1c2:	83 e4       	ldi	r24, 0x43	; 67
 1c4:	08 95       	ret
if (GetBit(PINC,3)==0) { return('D'); }
 1c6:	84 e4       	ldi	r24, 0x44	; 68
asm("nop"); // add a delay to allow PORTC to stabilize before checking
// ... *****FINISH*****
// Check keys in col 4
// ... *****FINISH*****
return('\0'); // default value
}
 1c8:	08 95       	ret

000001ca <main>:
int main(void)
{
unsigned char x;
DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	84 b9       	out	0x04, r24	; 4
 1ce:	15 b8       	out	0x05, r1	; 5
DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 1d0:	80 ef       	ldi	r24, 0xF0	; 240
 1d2:	87 b9       	out	0x07, r24	; 7
 1d4:	8f e0       	ldi	r24, 0x0F	; 15
 1d6:	88 b9       	out	0x08, r24	; 8
// . . . ***** FINISH *****
case 'D': PORTB = ~(0x0D); break;
case '*': PORTB = ~(0x0E); break;
case '0': PORTB = ~(0x00); break;
case '#': PORTB = ~(0x0F); break;
default: PORTB = ~(0x1B); break; // Should never occur. Middle LED off.
 1d8:	0f 2e       	mov	r0, r31
 1da:	f4 ee       	ldi	r31, 0xE4	; 228
 1dc:	7f 2e       	mov	r7, r31
 1de:	f0 2d       	mov	r31, r0
case 'C': PORTB = ~(0x0C); break;
// . . . ***** FINISH *****
case 'D': PORTB = ~(0x0D); break;
case '*': PORTB = ~(0x0E); break;
case '0': PORTB = ~(0x00); break;
case '#': PORTB = ~(0x0F); break;
 1e0:	0f 2e       	mov	r0, r31
 1e2:	f0 ef       	ldi	r31, 0xF0	; 240
 1e4:	8f 2e       	mov	r8, r31
 1e6:	f0 2d       	mov	r31, r0
case 'B': PORTB = ~(0x0B); break;
case 'C': PORTB = ~(0x0C); break;
// . . . ***** FINISH *****
case 'D': PORTB = ~(0x0D); break;
case '*': PORTB = ~(0x0E); break;
case '0': PORTB = ~(0x00); break;
 1e8:	99 24       	eor	r9, r9
 1ea:	9a 94       	dec	r9
case 'A': PORTB = ~(0x0A); break;
case 'B': PORTB = ~(0x0B); break;
case 'C': PORTB = ~(0x0C); break;
// . . . ***** FINISH *****
case 'D': PORTB = ~(0x0D); break;
case '*': PORTB = ~(0x0E); break;
 1ec:	0f 2e       	mov	r0, r31
 1ee:	f1 ef       	ldi	r31, 0xF1	; 241
 1f0:	af 2e       	mov	r10, r31
 1f2:	f0 2d       	mov	r31, r0
case '9': PORTB = ~(0x09); break;
case 'A': PORTB = ~(0x0A); break;
case 'B': PORTB = ~(0x0B); break;
case 'C': PORTB = ~(0x0C); break;
// . . . ***** FINISH *****
case 'D': PORTB = ~(0x0D); break;
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f2 ef       	ldi	r31, 0xF2	; 242
 1f8:	bf 2e       	mov	r11, r31
 1fa:	f0 2d       	mov	r31, r0
case '7': PORTB = ~(0x07); break;
case '8': PORTB = ~(0x08); break;
case '9': PORTB = ~(0x09); break;
case 'A': PORTB = ~(0x0A); break;
case 'B': PORTB = ~(0x0B); break;
case 'C': PORTB = ~(0x0C); break;
 1fc:	0f 2e       	mov	r0, r31
 1fe:	f3 ef       	ldi	r31, 0xF3	; 243
 200:	cf 2e       	mov	r12, r31
 202:	f0 2d       	mov	r31, r0
case '6': PORTB = ~(0x06); break;
case '7': PORTB = ~(0x07); break;
case '8': PORTB = ~(0x08); break;
case '9': PORTB = ~(0x09); break;
case 'A': PORTB = ~(0x0A); break;
case 'B': PORTB = ~(0x0B); break;
 204:	0f 2e       	mov	r0, r31
 206:	f4 ef       	ldi	r31, 0xF4	; 244
 208:	df 2e       	mov	r13, r31
 20a:	f0 2d       	mov	r31, r0
case '5': PORTB = ~(0x05); break;
case '6': PORTB = ~(0x06); break;
case '7': PORTB = ~(0x07); break;
case '8': PORTB = ~(0x08); break;
case '9': PORTB = ~(0x09); break;
case 'A': PORTB = ~(0x0A); break;
 20c:	0f 2e       	mov	r0, r31
 20e:	f5 ef       	ldi	r31, 0xF5	; 245
 210:	ef 2e       	mov	r14, r31
 212:	f0 2d       	mov	r31, r0
case '4': PORTB = ~(0x04); break;
case '5': PORTB = ~(0x05); break;
case '6': PORTB = ~(0x06); break;
case '7': PORTB = ~(0x07); break;
case '8': PORTB = ~(0x08); break;
case '9': PORTB = ~(0x09); break;
 214:	0f 2e       	mov	r0, r31
 216:	f6 ef       	ldi	r31, 0xF6	; 246
 218:	ff 2e       	mov	r15, r31
 21a:	f0 2d       	mov	r31, r0
case '3': PORTB = ~(0x03); break;
case '4': PORTB = ~(0x04); break;
case '5': PORTB = ~(0x05); break;
case '6': PORTB = ~(0x06); break;
case '7': PORTB = ~(0x07); break;
case '8': PORTB = ~(0x08); break;
 21c:	07 ef       	ldi	r16, 0xF7	; 247
case '2': PORTB = ~(0x02); break;
case '3': PORTB = ~(0x03); break;
case '4': PORTB = ~(0x04); break;
case '5': PORTB = ~(0x05); break;
case '6': PORTB = ~(0x06); break;
case '7': PORTB = ~(0x07); break;
 21e:	18 ef       	ldi	r17, 0xF8	; 248
case '1': PORTB = ~(0x01); break; // hex equivalent
case '2': PORTB = ~(0x02); break;
case '3': PORTB = ~(0x03); break;
case '4': PORTB = ~(0x04); break;
case '5': PORTB = ~(0x05); break;
case '6': PORTB = ~(0x06); break;
 220:	d9 ef       	ldi	r29, 0xF9	; 249
case '\0': PORTB = ~(0xFF); break; // All 5 LEDs on
case '1': PORTB = ~(0x01); break; // hex equivalent
case '2': PORTB = ~(0x02); break;
case '3': PORTB = ~(0x03); break;
case '4': PORTB = ~(0x04); break;
case '5': PORTB = ~(0x05); break;
 222:	ca ef       	ldi	r28, 0xFA	; 250
{
unsigned char x;
DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
while(1) {
x = GetKeypadKey();
 224:	81 df       	rcall	.-254    	; 0x128 <GetKeypadKey>
switch (x) {
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	85 34       	cpi	r24, 0x45	; 69
 22a:	91 05       	cpc	r25, r1
 22c:	50 f5       	brcc	.+84     	; 0x282 <main+0xb8>
 22e:	fc 01       	movw	r30, r24
 230:	ea 5b       	subi	r30, 0xBA	; 186
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	28 c0       	rjmp	.+80     	; 0x286 <__tablejump2__>
case '\0': PORTB = ~(0xFF); break; // All 5 LEDs on
 236:	15 b8       	out	0x05, r1	; 5
 238:	f5 cf       	rjmp	.-22     	; 0x224 <main+0x5a>
case '1': PORTB = ~(0x01); break; // hex equivalent
 23a:	8e ef       	ldi	r24, 0xFE	; 254
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	f2 cf       	rjmp	.-28     	; 0x224 <main+0x5a>
case '2': PORTB = ~(0x02); break;
 240:	8d ef       	ldi	r24, 0xFD	; 253
 242:	85 b9       	out	0x05, r24	; 5
 244:	ef cf       	rjmp	.-34     	; 0x224 <main+0x5a>
case '3': PORTB = ~(0x03); break;
 246:	8c ef       	ldi	r24, 0xFC	; 252
 248:	85 b9       	out	0x05, r24	; 5
 24a:	ec cf       	rjmp	.-40     	; 0x224 <main+0x5a>
case '4': PORTB = ~(0x04); break;
 24c:	8b ef       	ldi	r24, 0xFB	; 251
 24e:	85 b9       	out	0x05, r24	; 5
 250:	e9 cf       	rjmp	.-46     	; 0x224 <main+0x5a>
case '5': PORTB = ~(0x05); break;
 252:	c5 b9       	out	0x05, r28	; 5
 254:	e7 cf       	rjmp	.-50     	; 0x224 <main+0x5a>
case '6': PORTB = ~(0x06); break;
 256:	d5 b9       	out	0x05, r29	; 5
 258:	e5 cf       	rjmp	.-54     	; 0x224 <main+0x5a>
case '7': PORTB = ~(0x07); break;
 25a:	15 b9       	out	0x05, r17	; 5
 25c:	e3 cf       	rjmp	.-58     	; 0x224 <main+0x5a>
case '8': PORTB = ~(0x08); break;
 25e:	05 b9       	out	0x05, r16	; 5
 260:	e1 cf       	rjmp	.-62     	; 0x224 <main+0x5a>
case '9': PORTB = ~(0x09); break;
 262:	f5 b8       	out	0x05, r15	; 5
 264:	df cf       	rjmp	.-66     	; 0x224 <main+0x5a>
case 'A': PORTB = ~(0x0A); break;
 266:	e5 b8       	out	0x05, r14	; 5
 268:	dd cf       	rjmp	.-70     	; 0x224 <main+0x5a>
case 'B': PORTB = ~(0x0B); break;
 26a:	d5 b8       	out	0x05, r13	; 5
 26c:	db cf       	rjmp	.-74     	; 0x224 <main+0x5a>
case 'C': PORTB = ~(0x0C); break;
 26e:	c5 b8       	out	0x05, r12	; 5
 270:	d9 cf       	rjmp	.-78     	; 0x224 <main+0x5a>
// . . . ***** FINISH *****
case 'D': PORTB = ~(0x0D); break;
 272:	b5 b8       	out	0x05, r11	; 5
 274:	d7 cf       	rjmp	.-82     	; 0x224 <main+0x5a>
case '*': PORTB = ~(0x0E); break;
 276:	a5 b8       	out	0x05, r10	; 5
 278:	d5 cf       	rjmp	.-86     	; 0x224 <main+0x5a>
case '0': PORTB = ~(0x00); break;
 27a:	95 b8       	out	0x05, r9	; 5
 27c:	d3 cf       	rjmp	.-90     	; 0x224 <main+0x5a>
case '#': PORTB = ~(0x0F); break;
 27e:	85 b8       	out	0x05, r8	; 5
 280:	d1 cf       	rjmp	.-94     	; 0x224 <main+0x5a>
default: PORTB = ~(0x1B); break; // Should never occur. Middle LED off.
 282:	75 b8       	out	0x05, r7	; 5
 284:	cf cf       	rjmp	.-98     	; 0x224 <main+0x5a>

00000286 <__tablejump2__>:
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	00 24       	eor	r0, r0
 28c:	00 1c       	adc	r0, r0
 28e:	0b be       	out	0x3b, r0	; 59
 290:	07 90       	elpm	r0, Z+
 292:	f6 91       	elpm	r31, Z
 294:	e0 2d       	mov	r30, r0
 296:	09 94       	ijmp

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
